// @generated by
//     __             _____     _                 ___ ___ 
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org

/* eslint-disable */
/* spellchecker: disable */

import * as types from "./types.js";
export function isSchema(value: unknown): value is types.Schema {
    if (!(isInterfaceSchema(value))) {
        return false;
    }
    return true;
}
function isInterfaceSchema(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "id":
                if (!isSchemaId(propertyValue)) {
                    return false;
                }
                break;
            case "$schema":
                if (!isSchemaSchema(propertyValue)) {
                    return false;
                }
                break;
            case "title":
                if (!isSchemaTitle(propertyValue)) {
                    return false;
                }
                break;
            case "description":
                if (!isSchemaDescription(propertyValue)) {
                    return false;
                }
                break;
            case "default":
                if (!isSchemaDefault(propertyValue)) {
                    return false;
                }
                break;
            case "multipleOf":
                if (!isSchemaMultipleOf(propertyValue)) {
                    return false;
                }
                break;
            case "maximum":
                if (!isSchemaMaximum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMaximum":
                if (!isSchemaExclusiveMaximum(propertyValue)) {
                    return false;
                }
                break;
            case "minimum":
                if (!isSchemaMinimum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMinimum":
                if (!isSchemaExclusiveMinimum(propertyValue)) {
                    return false;
                }
                break;
            case "maxLength":
                if (!isSchemaMaxLength(propertyValue)) {
                    return false;
                }
                break;
            case "minLength":
                if (!isSchemaMinLength(propertyValue)) {
                    return false;
                }
                break;
            case "pattern":
                if (!isSchemaPattern(propertyValue)) {
                    return false;
                }
                break;
            case "additionalItems":
                if (!isSchemaAdditionalItems(propertyValue)) {
                    return false;
                }
                break;
            case "items":
                if (!isSchemaItems(propertyValue)) {
                    return false;
                }
                break;
            case "maxItems":
                if (!isSchemaMaxItems(propertyValue)) {
                    return false;
                }
                break;
            case "minItems":
                if (!isSchemaMinItems(propertyValue)) {
                    return false;
                }
                break;
            case "uniqueItems":
                if (!isSchemaUniqueItems(propertyValue)) {
                    return false;
                }
                break;
            case "maxProperties":
                if (!isSchemaMaxProperties(propertyValue)) {
                    return false;
                }
                break;
            case "minProperties":
                if (!isSchemaMinProperties(propertyValue)) {
                    return false;
                }
                break;
            case "required":
                if (!isSchemaRequired(propertyValue)) {
                    return false;
                }
                break;
            case "additionalProperties":
                if (!isSchemaAdditionalProperties(propertyValue)) {
                    return false;
                }
                break;
            case "definitions":
                if (!isSchemaDefinitions(propertyValue)) {
                    return false;
                }
                break;
            case "properties":
                if (!isSchemaProperties(propertyValue)) {
                    return false;
                }
                break;
            case "patternProperties":
                if (!isSchemaPatternProperties(propertyValue)) {
                    return false;
                }
                break;
            case "dependencies":
                if (!isSchemaDependencies(propertyValue)) {
                    return false;
                }
                break;
            case "enum":
                if (!isSchemaEnum(propertyValue)) {
                    return false;
                }
                break;
            case "type":
                if (!isSchemaType(propertyValue)) {
                    return false;
                }
                break;
            case "format":
                if (!isSchemaFormat(propertyValue)) {
                    return false;
                }
                break;
            case "allOf":
                if (!isSchemaAllOf(propertyValue)) {
                    return false;
                }
                break;
            case "anyOf":
                if (!isSchemaAnyOf(propertyValue)) {
                    return false;
                }
                break;
            case "oneOf":
                if (!isSchemaOneOf(propertyValue)) {
                    return false;
                }
                break;
            case "not":
                if (!isSchemaNot(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
export function isSchemaSchemaArray(value: unknown): value is types.SchemaSchemaArray {
    if (!(isArraySchemaSchemaArray(value))) {
        return false;
    }
    return true;
}
function isArraySchemaSchemaArray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isSchemaSchemaArrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaPositiveInteger(value: unknown): value is types.SchemaPositiveInteger {
    if (!(isNumberSchemaPositiveInteger(value))) {
        return false;
    }
    return true;
}
function isNumberSchemaPositiveInteger(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value % 1 !== 0) {
        return false;
    }
    if (value < 0) {
        return false;
    }
    return true;
}
export function isSchemaPositiveIntegerDefault0(value: unknown): value is types.SchemaPositiveIntegerDefault0 {
    if (!(isAllOfSchemaPositiveIntegerDefault0(value))) {
        return false;
    }
    return true;
}
function isAllOfSchemaPositiveIntegerDefault0(value: unknown): value is unknown {
    if (!isSchemaPositiveIntegerDefault00(value)) {
        return false;
    }
    if (!isSchemaPositiveIntegerDefault01(value)) {
        return false;
    }
    return true;
}
export function isSchemaSimpleTypes(value: unknown): value is types.SchemaSimpleTypes {
    return true;
}
export function isSchemaStringArray(value: unknown): value is types.SchemaStringArray {
    if (!(isArraySchemaStringArray(value))) {
        return false;
    }
    return true;
}
function isArraySchemaStringArray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    const elementValueSeen = new Set<types.SchemaStringArrayItems>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isSchemaStringArrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaId(value: unknown): value is types.SchemaId {
    if (!(isStringSchemaId(value))) {
        return false;
    }
    return true;
}
function isStringSchemaId(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaSchema(value: unknown): value is types.SchemaSchema {
    if (!(isStringSchemaSchema(value))) {
        return false;
    }
    return true;
}
function isStringSchemaSchema(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaTitle(value: unknown): value is types.SchemaTitle {
    if (!(isStringSchemaTitle(value))) {
        return false;
    }
    return true;
}
function isStringSchemaTitle(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaDescription(value: unknown): value is types.SchemaDescription {
    if (!(isStringSchemaDescription(value))) {
        return false;
    }
    return true;
}
function isStringSchemaDescription(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaDefault(value: unknown): value is types.SchemaDefault {
    return true;
}
export function isSchemaMultipleOf(value: unknown): value is types.SchemaMultipleOf {
    if (!(isNumberSchemaMultipleOf(value))) {
        return false;
    }
    return true;
}
function isNumberSchemaMultipleOf(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value <= 0) {
        return false;
    }
    return true;
}
export function isSchemaMaximum(value: unknown): value is types.SchemaMaximum {
    if (!(isNumberSchemaMaximum(value))) {
        return false;
    }
    return true;
}
function isNumberSchemaMaximum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isSchemaExclusiveMaximum(value: unknown): value is types.SchemaExclusiveMaximum {
    if (!(isBooleanSchemaExclusiveMaximum(value))) {
        return false;
    }
    return true;
}
function isBooleanSchemaExclusiveMaximum(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isSchemaMinimum(value: unknown): value is types.SchemaMinimum {
    if (!(isNumberSchemaMinimum(value))) {
        return false;
    }
    return true;
}
function isNumberSchemaMinimum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isSchemaExclusiveMinimum(value: unknown): value is types.SchemaExclusiveMinimum {
    if (!(isBooleanSchemaExclusiveMinimum(value))) {
        return false;
    }
    return true;
}
function isBooleanSchemaExclusiveMinimum(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isSchemaMaxLength(value: unknown): value is types.SchemaMaxLength {
    if (!isSchemaPositiveInteger(value)) {
        return false;
    }
    return true;
}
export function isSchemaMinLength(value: unknown): value is types.SchemaMinLength {
    if (!isSchemaPositiveIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isSchemaPattern(value: unknown): value is types.SchemaPattern {
    if (!(isStringSchemaPattern(value))) {
        return false;
    }
    return true;
}
function isStringSchemaPattern(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaAdditionalItems(value: unknown): value is types.SchemaAdditionalItems {
    if (!(isAnyOfSchemaAdditionalItems(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaAdditionalItems(value: unknown): value is unknown {
    if (isSchemaAdditionalItems0(value)) {
        return true;
    }
    if (isSchemaAdditionalItems1(value)) {
        return true;
    }
    return false;
}
export function isSchemaItems(value: unknown): value is types.SchemaItems {
    if (!(isAnyOfSchemaItems(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaItems(value: unknown): value is unknown {
    if (isSchemaItems0(value)) {
        return true;
    }
    if (isSchemaItems1(value)) {
        return true;
    }
    return false;
}
export function isSchemaMaxItems(value: unknown): value is types.SchemaMaxItems {
    if (!isSchemaPositiveInteger(value)) {
        return false;
    }
    return true;
}
export function isSchemaMinItems(value: unknown): value is types.SchemaMinItems {
    if (!isSchemaPositiveIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isSchemaUniqueItems(value: unknown): value is types.SchemaUniqueItems {
    if (!(isBooleanSchemaUniqueItems(value))) {
        return false;
    }
    return true;
}
function isBooleanSchemaUniqueItems(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isSchemaMaxProperties(value: unknown): value is types.SchemaMaxProperties {
    if (!isSchemaPositiveInteger(value)) {
        return false;
    }
    return true;
}
export function isSchemaMinProperties(value: unknown): value is types.SchemaMinProperties {
    if (!isSchemaPositiveIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isSchemaRequired(value: unknown): value is types.SchemaRequired {
    if (!isSchemaStringArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaAdditionalProperties(value: unknown): value is types.SchemaAdditionalProperties {
    if (!(isAnyOfSchemaAdditionalProperties(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaAdditionalProperties(value: unknown): value is unknown {
    if (isSchemaAdditionalProperties0(value)) {
        return true;
    }
    if (isSchemaAdditionalProperties1(value)) {
        return true;
    }
    return false;
}
export function isSchemaDefinitions(value: unknown): value is types.SchemaDefinitions {
    if (!(isRecordSchemaDefinitions(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDefinitions(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDefinitionsAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaProperties(value: unknown): value is types.SchemaProperties {
    if (!(isRecordSchemaProperties(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaProperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaPropertiesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaPatternProperties(value: unknown): value is types.SchemaPatternProperties {
    if (!(isRecordSchemaPatternProperties(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaPatternProperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaPatternPropertiesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaDependencies(value: unknown): value is types.SchemaDependencies {
    if (!(isRecordSchemaDependencies(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDependencies(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDependenciesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaEnum(value: unknown): value is types.SchemaEnum {
    return true;
}
export function isSchemaType(value: unknown): value is types.SchemaType {
    if (!(isAnyOfSchemaType(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaType(value: unknown): value is unknown {
    if (isSchemaType0(value)) {
        return true;
    }
    if (isSchemaType1(value)) {
        return true;
    }
    return false;
}
export function isSchemaFormat(value: unknown): value is types.SchemaFormat {
    if (!(isStringSchemaFormat(value))) {
        return false;
    }
    return true;
}
function isStringSchemaFormat(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaAllOf(value: unknown): value is types.SchemaAllOf {
    if (!isSchemaSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaAnyOf(value: unknown): value is types.SchemaAnyOf {
    if (!isSchemaSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaOneOf(value: unknown): value is types.SchemaOneOf {
    if (!isSchemaSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaNot(value: unknown): value is types.SchemaNot {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaSchemaArrayItems(value: unknown): value is types.SchemaSchemaArrayItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaPositiveIntegerDefault00(value: unknown): value is types.SchemaPositiveIntegerDefault00 {
    if (!isSchemaPositiveInteger(value)) {
        return false;
    }
    return true;
}
export function isSchemaPositiveIntegerDefault01(value: unknown): value is types.SchemaPositiveIntegerDefault01 {
    return true;
}
export function isSchemaStringArrayItems(value: unknown): value is types.SchemaStringArrayItems {
    if (!(isStringSchemaStringArrayItems(value))) {
        return false;
    }
    return true;
}
function isStringSchemaStringArrayItems(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isSchemaAdditionalItems0(value: unknown): value is types.SchemaAdditionalItems0 {
    if (!(isBooleanSchemaAdditionalItems0(value))) {
        return false;
    }
    return true;
}
function isBooleanSchemaAdditionalItems0(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isSchemaAdditionalItems1(value: unknown): value is types.SchemaAdditionalItems1 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaItems0(value: unknown): value is types.SchemaItems0 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaItems1(value: unknown): value is types.SchemaItems1 {
    if (!isSchemaSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaAdditionalProperties0(value: unknown): value is types.SchemaAdditionalProperties0 {
    if (!(isBooleanSchemaAdditionalProperties0(value))) {
        return false;
    }
    return true;
}
function isBooleanSchemaAdditionalProperties0(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isSchemaAdditionalProperties1(value: unknown): value is types.SchemaAdditionalProperties1 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDefinitionsAdditionalProperties(value: unknown): value is types.SchemaDefinitionsAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaPropertiesAdditionalProperties(value: unknown): value is types.SchemaPropertiesAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaPatternPropertiesAdditionalProperties(value: unknown): value is types.SchemaPatternPropertiesAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependenciesAdditionalProperties(value: unknown): value is types.SchemaDependenciesAdditionalProperties {
    if (!(isAnyOfSchemaDependenciesAdditionalProperties(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaDependenciesAdditionalProperties(value: unknown): value is unknown {
    if (isSchemaDependenciesAdditionalProperties0(value)) {
        return true;
    }
    if (isSchemaDependenciesAdditionalProperties1(value)) {
        return true;
    }
    return false;
}
export function isSchemaDependenciesAdditionalProperties0(value: unknown): value is types.SchemaDependenciesAdditionalProperties0 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependenciesAdditionalProperties1(value: unknown): value is types.SchemaDependenciesAdditionalProperties1 {
    if (!isSchemaStringArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaType0(value: unknown): value is types.SchemaType0 {
    if (!isSchemaSimpleTypes(value)) {
        return false;
    }
    return true;
}
export function isSchemaType1(value: unknown): value is types.SchemaType1 {
    if (!(isArraySchemaType1(value))) {
        return false;
    }
    return true;
}
function isArraySchemaType1(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    const elementValueSeen = new Set<types.SchemaType1Items>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isSchemaType1Items(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaType1Items(value: unknown): value is types.SchemaType1Items {
    if (!isSchemaSimpleTypes(value)) {
        return false;
    }
    return true;
}
