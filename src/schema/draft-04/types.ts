// @generated by
//     __             _____     _                 ___ ___ 
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org

/* eslint-disable */
/* spellchecker: disable */

/**
Core schema meta-schema
*/
export type Schema = ({
    id?: SchemaId;
    $schema?: SchemaSchema;
    title?: SchemaTitle;
    description?: SchemaDescription;
    default?: SchemaDefault;
    multipleOf?: SchemaMultipleOf;
    maximum?: SchemaMaximum;
    exclusiveMaximum?: SchemaExclusiveMaximum;
    minimum?: SchemaMinimum;
    exclusiveMinimum?: SchemaExclusiveMinimum;
    maxLength?: SchemaMaxLength;
    minLength?: SchemaMinLength;
    pattern?: SchemaPattern;
    additionalItems?: SchemaAdditionalItems;
    items?: SchemaItems;
    maxItems?: SchemaMaxItems;
    minItems?: SchemaMinItems;
    uniqueItems?: SchemaUniqueItems;
    maxProperties?: SchemaMaxProperties;
    minProperties?: SchemaMinProperties;
    required?: SchemaRequired;
    additionalProperties?: SchemaAdditionalProperties;
    definitions?: SchemaDefinitions;
    properties?: SchemaProperties;
    patternProperties?: SchemaPatternProperties;
    dependencies?: SchemaDependencies;
    enum?: SchemaEnum;
    type?: SchemaType;
    format?: SchemaFormat;
    allOf?: SchemaAllOf;
    anyOf?: SchemaAnyOf;
    oneOf?: SchemaOneOf;
    not?: SchemaNot;
});
export type SchemaSchemaArray = (SchemaSchemaArrayItems[]);
export type SchemaPositiveInteger = (number);
export type SchemaPositiveIntegerDefault0 = ((SchemaPositiveIntegerDefault00 & SchemaPositiveIntegerDefault01));
export type SchemaSimpleTypes = unknown;
export type SchemaStringArray = (SchemaStringArrayItems[]);
export type SchemaId = (string);
export type SchemaSchema = (string);
export type SchemaTitle = (string);
export type SchemaDescription = (string);
export type SchemaDefault = unknown;
export type SchemaMultipleOf = (number);
export type SchemaMaximum = (number);
export type SchemaExclusiveMaximum = (boolean);
export type SchemaMinimum = (number);
export type SchemaExclusiveMinimum = (boolean);
export type SchemaMaxLength = SchemaPositiveInteger;
export type SchemaMinLength = SchemaPositiveIntegerDefault0;
export type SchemaPattern = (string);
export type SchemaAdditionalItems = ((Partial<SchemaAdditionalItems0> & Partial<SchemaAdditionalItems1>));
export type SchemaItems = ((Partial<SchemaItems0> & Partial<SchemaItems1>));
export type SchemaMaxItems = SchemaPositiveInteger;
export type SchemaMinItems = SchemaPositiveIntegerDefault0;
export type SchemaUniqueItems = (boolean);
export type SchemaMaxProperties = SchemaPositiveInteger;
export type SchemaMinProperties = SchemaPositiveIntegerDefault0;
export type SchemaRequired = SchemaStringArray;
export type SchemaAdditionalProperties = ((Partial<SchemaAdditionalProperties0> & Partial<SchemaAdditionalProperties1>));
export type SchemaDefinitions = (Record<string, SchemaDefinitionsAdditionalProperties>);
export type SchemaProperties = (Record<string, SchemaPropertiesAdditionalProperties>);
export type SchemaPatternProperties = (Record<string, SchemaPatternPropertiesAdditionalProperties>);
export type SchemaDependencies = (Record<string, SchemaDependenciesAdditionalProperties>);
export type SchemaEnum = unknown;
export type SchemaType = ((Partial<SchemaType0> & Partial<SchemaType1>));
export type SchemaFormat = (string);
export type SchemaAllOf = SchemaSchemaArray;
export type SchemaAnyOf = SchemaSchemaArray;
export type SchemaOneOf = SchemaSchemaArray;
export type SchemaNot = Schema;
export type SchemaSchemaArrayItems = Schema;
export type SchemaPositiveIntegerDefault00 = SchemaPositiveInteger;
export type SchemaPositiveIntegerDefault01 = unknown;
export type SchemaStringArrayItems = (string);
export type SchemaAdditionalItems0 = (boolean);
export type SchemaAdditionalItems1 = Schema;
export type SchemaItems0 = Schema;
export type SchemaItems1 = SchemaSchemaArray;
export type SchemaAdditionalProperties0 = (boolean);
export type SchemaAdditionalProperties1 = Schema;
export type SchemaDefinitionsAdditionalProperties = Schema;
export type SchemaPropertiesAdditionalProperties = Schema;
export type SchemaPatternPropertiesAdditionalProperties = Schema;
export type SchemaDependenciesAdditionalProperties = ((Partial<SchemaDependenciesAdditionalProperties0> & Partial<SchemaDependenciesAdditionalProperties1>));
export type SchemaDependenciesAdditionalProperties0 = Schema;
export type SchemaDependenciesAdditionalProperties1 = SchemaStringArray;
export type SchemaType0 = SchemaSimpleTypes;
export type SchemaType1 = (SchemaType1Items[]);
export type SchemaType1Items = SchemaSimpleTypes;
