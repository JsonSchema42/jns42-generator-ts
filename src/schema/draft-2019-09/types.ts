// @generated by
//     __             _____     _                 ___ ___ 
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org
    
/* eslint-disable */
/* spellchecker: disable */

export type Core = ({
    $id?: CoreId;
    $schema?: CoreSchema;
    $anchor?: CoreAnchor;
    $ref?: CoreRef;
    $recursiveRef?: CoreRecursiveRef;
    $recursiveAnchor?: CoreRecursiveAnchor;
    $vocabulary?: CoreVocabulary;
    $comment?: CoreComment;
    $defs?: CoreDefs;
} | boolean);
export type CoreId = (string);
export type CoreSchema = (string);
export type CoreAnchor = (string);
export type CoreRef = (string);
export type CoreRecursiveRef = (string);
export type CoreRecursiveAnchor = (boolean);
export type CoreVocabulary = (Record<string, CoreVocabularyAdditionalProperties>);
export type CoreComment = (string);
export type CoreDefs = (Record<string, CoreDefsAdditionalProperties>);
export type CoreVocabularyAdditionalProperties = (boolean);
export type CoreDefsAdditionalProperties = Schema;
export type Applicator = ({
    additionalItems?: ApplicatorAdditionalItems;
    unevaluatedItems?: ApplicatorUnevaluatedItems;
    items?: ApplicatorItems;
    contains?: ApplicatorContains;
    additionalProperties?: ApplicatorAdditionalProperties;
    unevaluatedProperties?: ApplicatorUnevaluatedProperties;
    properties?: ApplicatorProperties;
    patternProperties?: ApplicatorPatternProperties;
    dependentSchemas?: ApplicatorDependentSchemas;
    propertyNames?: ApplicatorPropertyNames;
    if?: ApplicatorIf;
    then?: ApplicatorThen;
    else?: ApplicatorElse;
    allOf?: ApplicatorAllOf;
    anyOf?: ApplicatorAnyOf;
    oneOf?: ApplicatorOneOf;
    not?: ApplicatorNot;
} | boolean);
export type ApplicatorSchemaArray = (ApplicatorSchemaArrayItems[]);
export type ApplicatorAdditionalItems = Schema;
export type ApplicatorUnevaluatedItems = Schema;
export type ApplicatorItems = ((Partial<ApplicatorItems0> & Partial<ApplicatorItems1>));
export type ApplicatorContains = Schema;
export type ApplicatorAdditionalProperties = Schema;
export type ApplicatorUnevaluatedProperties = Schema;
export type ApplicatorProperties = (Record<string, ApplicatorPropertiesAdditionalProperties>);
export type ApplicatorPatternProperties = (Record<string, ApplicatorPatternPropertiesAdditionalProperties>);
export type ApplicatorDependentSchemas = (Record<string, ApplicatorDependentSchemasAdditionalProperties>);
export type ApplicatorPropertyNames = Schema;
export type ApplicatorIf = Schema;
export type ApplicatorThen = Schema;
export type ApplicatorElse = Schema;
export type ApplicatorAllOf = ApplicatorSchemaArray;
export type ApplicatorAnyOf = ApplicatorSchemaArray;
export type ApplicatorOneOf = ApplicatorSchemaArray;
export type ApplicatorNot = Schema;
export type ApplicatorSchemaArrayItems = Schema;
export type ApplicatorItems0 = Schema;
export type ApplicatorItems1 = ApplicatorSchemaArray;
export type ApplicatorPropertiesAdditionalProperties = Schema;
export type ApplicatorPatternPropertiesAdditionalProperties = Schema;
export type ApplicatorDependentSchemasAdditionalProperties = Schema;
export type Validation = ({
    multipleOf?: ValidationMultipleOf;
    maximum?: ValidationMaximum;
    exclusiveMaximum?: ValidationExclusiveMaximum;
    minimum?: ValidationMinimum;
    exclusiveMinimum?: ValidationExclusiveMinimum;
    maxLength?: ValidationMaxLength;
    minLength?: ValidationMinLength;
    pattern?: ValidationPattern;
    maxItems?: ValidationMaxItems;
    minItems?: ValidationMinItems;
    uniqueItems?: ValidationUniqueItems;
    maxContains?: ValidationMaxContains;
    minContains?: ValidationMinContains;
    maxProperties?: ValidationMaxProperties;
    minProperties?: ValidationMinProperties;
    required?: ValidationRequired;
    dependentRequired?: ValidationDependentRequired;
    const?: ValidationConst;
    enum?: ValidationEnum;
    type?: ValidationType;
} | boolean);
export type ValidationNonNegativeInteger = (number);
export type ValidationNonNegativeIntegerDefault0 = ValidationNonNegativeInteger;
export type ValidationSimpleTypes = unknown;
export type ValidationStringArray = (ValidationStringArrayItems[]);
export type ValidationMultipleOf = (number);
export type ValidationMaximum = (number);
export type ValidationExclusiveMaximum = (number);
export type ValidationMinimum = (number);
export type ValidationExclusiveMinimum = (number);
export type ValidationMaxLength = ValidationNonNegativeInteger;
export type ValidationMinLength = ValidationNonNegativeIntegerDefault0;
export type ValidationPattern = (string);
export type ValidationMaxItems = ValidationNonNegativeInteger;
export type ValidationMinItems = ValidationNonNegativeIntegerDefault0;
export type ValidationUniqueItems = (boolean);
export type ValidationMaxContains = ValidationNonNegativeInteger;
export type ValidationMinContains = ValidationNonNegativeInteger;
export type ValidationMaxProperties = ValidationNonNegativeInteger;
export type ValidationMinProperties = ValidationNonNegativeIntegerDefault0;
export type ValidationRequired = ValidationStringArray;
export type ValidationDependentRequired = (Record<string, ValidationDependentRequiredAdditionalProperties>);
export type ValidationConst = (any);
export type ValidationEnum = (ValidationEnumItems[]);
export type ValidationType = ((Partial<ValidationType0> & Partial<ValidationType1>));
export type ValidationStringArrayItems = (string);
export type ValidationDependentRequiredAdditionalProperties = ValidationStringArray;
export type ValidationEnumItems = (any);
export type ValidationType0 = ValidationSimpleTypes;
export type ValidationType1 = (ValidationType1Items[]);
export type ValidationType1Items = ValidationSimpleTypes;
export type MetaData = ({
    title?: MetaDataTitle;
    description?: MetaDataDescription;
    default?: MetaDataDefault;
    deprecated?: MetaDataDeprecated;
    readOnly?: MetaDataReadOnly;
    writeOnly?: MetaDataWriteOnly;
    examples?: MetaDataExamples;
} | boolean);
export type MetaDataTitle = (string);
export type MetaDataDescription = (string);
export type MetaDataDefault = (any);
export type MetaDataDeprecated = (boolean);
export type MetaDataReadOnly = (boolean);
export type MetaDataWriteOnly = (boolean);
export type MetaDataExamples = (MetaDataExamplesItems[]);
export type MetaDataExamplesItems = (any);
export type Format = ({
    format?: FormatFormat;
} | boolean);
export type FormatFormat = (string);
export type Content = ({
    contentMediaType?: ContentContentMediaType;
    contentEncoding?: ContentContentEncoding;
    contentSchema?: ContentContentSchema;
} | boolean);
export type ContentContentMediaType = (string);
export type ContentContentEncoding = (string);
export type ContentContentSchema = Schema;
export type Schema = (((Schema0 & Schema1 & Schema2 & Schema3 & Schema4 & Schema5)) & ({
    definitions?: SchemaDefinitions;
    dependencies?: SchemaDependencies;
} | boolean));
export type SchemaDefinitions = (Record<string, SchemaDefinitionsAdditionalProperties>);
export type SchemaDependencies = (Record<string, SchemaDependenciesAdditionalProperties>);
export type Schema0 = Core;
export type Schema1 = Applicator;
export type Schema2 = Validation;
export type Schema3 = MetaData;
export type Schema4 = Format;
export type Schema5 = Content;
export type SchemaDefinitionsAdditionalProperties = Schema;
export type SchemaDependenciesAdditionalProperties = ((Partial<SchemaDependenciesAdditionalProperties0> & Partial<SchemaDependenciesAdditionalProperties1>));
export type SchemaDependenciesAdditionalProperties0 = Schema;
export type SchemaDependenciesAdditionalProperties1 = ValidationStringArray;
