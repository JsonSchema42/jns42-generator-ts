// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org

/* eslint-disable */
/* spellchecker: disable */

/**
JsonSchema42 intermediate node
*/
export type SchemaJson = {
	superNodeId?: SuperNodeId;
	deprecated: Deprecated;
	title: Title;
	description: Description;
	examples: Examples;
	types: Types;
	compounds: Compounds;
};
export type TypeUnion =
	| TypeUnionOneOf0
	| TypeUnionOneOf1
	| TypeUnionOneOf2
	| OneOf3
	| OneOf4
	| OneOf5
	| OneOf6
	| OneOf7
	| OneOf8
	| OneOf9;
export type CompoundUnion =
	| CompoundUnionOneOf0
	| CompoundUnionOneOf1
	| CompoundUnionOneOf2;
export type NullType = {
	type: NullTypeType;
};
export type AnyType = {
	type: AnyTypeType;
};
export type NeverType = {
	type: NeverTypeType;
};
export type BooleanType = {
	type: BooleanTypeType;
	options?: BooleanTypeOptions;
};
export type DefsNumberType = {
	type: NumberTypeType;
	numberType: PropertiesNumberType;
	options?: NumberTypeOptions;
	minimumInclusive?: MinimumInclusive;
	minimumExclusive?: MinimumExclusive;
	maximumInclusive?: MaximumInclusive;
	maximumExclusive?: MaximumExclusive;
	multipleOf?: MultipleOf;
};
export type StringType = {
	type: StringTypeType;
	options?: StringTypeOptions;
	minimumLength?: MinimumLength;
	maximumLength?: MaximumLength;
	valuePattern?: ValuePattern;
};
export type TupleType = {
	type: TupleTypeType;
	itemTypeNodeIds: ItemTypeNodeIds;
};
export type ArrayType = {
	type: ArrayTypeType;
	minimumItems?: MinimumItems;
	maximumItems?: MaximumItems;
	uniqueItems?: UniqueItems;
	itemTypeNodeId: ItemTypeNodeId;
};
export type InterfaceType = {
	type: InterfaceTypeType;
	requiredProperties: InterfaceTypeRequiredProperties;
	propertyTypeNodeIds: PropertyTypeNodeIds;
};
export type RecordType = {
	type: RecordTypeType;
	requiredProperties: RecordTypeRequiredProperties;
	minimumProperties?: MinimumProperties;
	maximumProperties?: MaximumProperties;
	propertyTypeNodeId: PropertyTypeNodeId;
};
export type OneOfCompound = {
	type: OneOfCompoundType;
	typeNodeIds: OneOfCompoundTypeNodeIds;
};
export type AnyOfCompound = {
	type: AnyOfCompoundType;
	typeNodeIds: AnyOfCompoundTypeNodeIds;
};
export type AllOfCompound = {
	type: AllOfCompoundType;
	typeNodeIds: AllOfCompoundTypeNodeIds;
};
export type SuperNodeId = string;
export type Deprecated = boolean;
export type Title = string;
export type Description = string;
export type Examples = ExamplesItems[];
export type Types = TypesItems[];
export type Compounds = CompoundsItems[];
export type TypeUnionOneOf0 = NullType;
export type TypeUnionOneOf1 = AnyType;
export type TypeUnionOneOf2 = NeverType;
export type OneOf3 = BooleanType;
export type OneOf4 = DefsNumberType;
export type OneOf5 = StringType;
export type OneOf6 = TupleType;
export type OneOf7 = ArrayType;
export type OneOf8 = InterfaceType;
export type OneOf9 = RecordType;
export type CompoundUnionOneOf0 = OneOfCompound;
export type CompoundUnionOneOf1 = AnyOfCompound;
export type CompoundUnionOneOf2 = AllOfCompound;
export type NullTypeType = "null";
export type AnyTypeType = "any";
export type NeverTypeType = "never";
export type BooleanTypeType = "boolean";
export type BooleanTypeOptions = BooleanTypeOptionsItems[];
export type BooleanTypeOptionsItems = boolean;
export type NumberTypeType = "number";
export type PropertiesNumberType = "integer" | "float";
export type NumberTypeOptions = NumberTypeOptionsItems[];
export type MinimumInclusive = number;
export type MinimumExclusive = number;
export type MaximumInclusive = number;
export type MaximumExclusive = number;
export type MultipleOf = number;
export type NumberTypeOptionsItems = number;
export type StringTypeType = "string";
export type StringTypeOptions = StringTypeOptionsItems[];
export type MinimumLength = number;
export type MaximumLength = number;
export type ValuePattern = string;
export type StringTypeOptionsItems = string;
export type TupleTypeType = "tuple";
export type ItemTypeNodeIds = ItemTypeNodeIdsItems[];
export type ItemTypeNodeIdsItems = string;
export type ArrayTypeType = "array";
export type MinimumItems = number;
export type MaximumItems = number;
export type UniqueItems = boolean;
export type ItemTypeNodeId = string;
export type InterfaceTypeType = "interface";
export type InterfaceTypeRequiredProperties =
	InterfaceTypeRequiredPropertiesItems[];
export type PropertyTypeNodeIds = Record<string, AdditionalProperties>;
export type InterfaceTypeRequiredPropertiesItems = string;
export type AdditionalProperties = string;
export type RecordTypeType = "record";
export type RecordTypeRequiredProperties = RecordTypeRequiredPropertiesItems[];
export type MinimumProperties = number;
export type MaximumProperties = number;
export type PropertyTypeNodeId = string;
export type RecordTypeRequiredPropertiesItems = string;
export type OneOfCompoundType = "one-of";
export type OneOfCompoundTypeNodeIds = OneOfCompoundTypeNodeIdsItems[];
export type OneOfCompoundTypeNodeIdsItems = string;
export type AnyOfCompoundType = "any-of";
export type AnyOfCompoundTypeNodeIds = AnyOfCompoundTypeNodeIdsItems[];
export type AnyOfCompoundTypeNodeIdsItems = string;
export type AllOfCompoundType = "all-of";
export type AllOfCompoundTypeNodeIds = AllOfCompoundTypeNodeIdsItems[];
export type AllOfCompoundTypeNodeIdsItems = string;
export type ExamplesItems = any;
export type TypesItems = TypeUnion;
export type CompoundsItems = CompoundUnion;
export function isSchemaJson(value: unknown): value is SchemaJson {
	if (!isInterfaceSchemaJson(value)) {
		return false;
	}
	return true;
}
function isInterfaceSchemaJson(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("deprecated" in value)) {
		return false;
	}
	if (!("title" in value)) {
		return false;
	}
	if (!("description" in value)) {
		return false;
	}
	if (!("examples" in value)) {
		return false;
	}
	if (!("types" in value)) {
		return false;
	}
	if (!("compounds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "superNodeId":
				if (!isSuperNodeId(propertyValue)) {
					return false;
				}
				break;
			case "deprecated":
				if (!isDeprecated(propertyValue)) {
					return false;
				}
				break;
			case "title":
				if (!isTitle(propertyValue)) {
					return false;
				}
				break;
			case "description":
				if (!isDescription(propertyValue)) {
					return false;
				}
				break;
			case "examples":
				if (!isExamples(propertyValue)) {
					return false;
				}
				break;
			case "types":
				if (!isTypes(propertyValue)) {
					return false;
				}
				break;
			case "compounds":
				if (!isCompounds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isTypeUnion(value: unknown): value is TypeUnion {
	if (!isOneOfTypeUnion(value)) {
		return false;
	}
	return true;
}
function isOneOfTypeUnion(value: unknown): value is unknown {
	let validCounter = 0;
	if (isTypeUnionOneOf0(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isTypeUnionOneOf1(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isTypeUnionOneOf2(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf3(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf4(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf5(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf6(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf7(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf8(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isOneOf9(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	return true;
}
export function isCompoundUnion(value: unknown): value is CompoundUnion {
	if (!isOneOfCompoundUnion(value)) {
		return false;
	}
	return true;
}
function isOneOfCompoundUnion(value: unknown): value is unknown {
	let validCounter = 0;
	if (isCompoundUnionOneOf0(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isCompoundUnionOneOf1(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	if (isCompoundUnionOneOf2(value)) {
		validCounter++;
	}
	if (validCounter > 1) {
		return false;
	}
	return true;
}
export function isNullType(value: unknown): value is NullType {
	if (!isInterfaceNullType(value)) {
		return false;
	}
	return true;
}
function isInterfaceNullType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isNullTypeType(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isAnyType(value: unknown): value is AnyType {
	if (!isInterfaceAnyType(value)) {
		return false;
	}
	return true;
}
function isInterfaceAnyType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isAnyTypeType(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isNeverType(value: unknown): value is NeverType {
	if (!isInterfaceNeverType(value)) {
		return false;
	}
	return true;
}
function isInterfaceNeverType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isNeverTypeType(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isBooleanType(value: unknown): value is BooleanType {
	if (!isInterfaceBooleanType(value)) {
		return false;
	}
	return true;
}
function isInterfaceBooleanType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isBooleanTypeType(propertyValue)) {
					return false;
				}
				break;
			case "options":
				if (!isBooleanTypeOptions(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isDefsNumberType(value: unknown): value is DefsNumberType {
	if (!isInterfaceDefsNumberType(value)) {
		return false;
	}
	return true;
}
function isInterfaceDefsNumberType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("numberType" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isNumberTypeType(propertyValue)) {
					return false;
				}
				break;
			case "numberType":
				if (!isPropertiesNumberType(propertyValue)) {
					return false;
				}
				break;
			case "options":
				if (!isNumberTypeOptions(propertyValue)) {
					return false;
				}
				break;
			case "minimumInclusive":
				if (!isMinimumInclusive(propertyValue)) {
					return false;
				}
				break;
			case "minimumExclusive":
				if (!isMinimumExclusive(propertyValue)) {
					return false;
				}
				break;
			case "maximumInclusive":
				if (!isMaximumInclusive(propertyValue)) {
					return false;
				}
				break;
			case "maximumExclusive":
				if (!isMaximumExclusive(propertyValue)) {
					return false;
				}
				break;
			case "multipleOf":
				if (!isMultipleOf(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isStringType(value: unknown): value is StringType {
	if (!isInterfaceStringType(value)) {
		return false;
	}
	return true;
}
function isInterfaceStringType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isStringTypeType(propertyValue)) {
					return false;
				}
				break;
			case "options":
				if (!isStringTypeOptions(propertyValue)) {
					return false;
				}
				break;
			case "minimumLength":
				if (!isMinimumLength(propertyValue)) {
					return false;
				}
				break;
			case "maximumLength":
				if (!isMaximumLength(propertyValue)) {
					return false;
				}
				break;
			case "valuePattern":
				if (!isValuePattern(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isTupleType(value: unknown): value is TupleType {
	if (!isInterfaceTupleType(value)) {
		return false;
	}
	return true;
}
function isInterfaceTupleType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("itemTypeNodeIds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isTupleTypeType(propertyValue)) {
					return false;
				}
				break;
			case "itemTypeNodeIds":
				if (!isItemTypeNodeIds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isArrayType(value: unknown): value is ArrayType {
	if (!isInterfaceArrayType(value)) {
		return false;
	}
	return true;
}
function isInterfaceArrayType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("itemTypeNodeId" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isArrayTypeType(propertyValue)) {
					return false;
				}
				break;
			case "minimumItems":
				if (!isMinimumItems(propertyValue)) {
					return false;
				}
				break;
			case "maximumItems":
				if (!isMaximumItems(propertyValue)) {
					return false;
				}
				break;
			case "uniqueItems":
				if (!isUniqueItems(propertyValue)) {
					return false;
				}
				break;
			case "itemTypeNodeId":
				if (!isItemTypeNodeId(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isInterfaceType(value: unknown): value is InterfaceType {
	if (!isInterfaceInterfaceType(value)) {
		return false;
	}
	return true;
}
function isInterfaceInterfaceType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("requiredProperties" in value)) {
		return false;
	}
	if (!("propertyTypeNodeIds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isInterfaceTypeType(propertyValue)) {
					return false;
				}
				break;
			case "requiredProperties":
				if (!isInterfaceTypeRequiredProperties(propertyValue)) {
					return false;
				}
				break;
			case "propertyTypeNodeIds":
				if (!isPropertyTypeNodeIds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isRecordType(value: unknown): value is RecordType {
	if (!isInterfaceRecordType(value)) {
		return false;
	}
	return true;
}
function isInterfaceRecordType(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("requiredProperties" in value)) {
		return false;
	}
	if (!("propertyTypeNodeId" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isRecordTypeType(propertyValue)) {
					return false;
				}
				break;
			case "requiredProperties":
				if (!isRecordTypeRequiredProperties(propertyValue)) {
					return false;
				}
				break;
			case "minimumProperties":
				if (!isMinimumProperties(propertyValue)) {
					return false;
				}
				break;
			case "maximumProperties":
				if (!isMaximumProperties(propertyValue)) {
					return false;
				}
				break;
			case "propertyTypeNodeId":
				if (!isPropertyTypeNodeId(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isOneOfCompound(value: unknown): value is OneOfCompound {
	if (!isInterfaceOneOfCompound(value)) {
		return false;
	}
	return true;
}
function isInterfaceOneOfCompound(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("typeNodeIds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isOneOfCompoundType(propertyValue)) {
					return false;
				}
				break;
			case "typeNodeIds":
				if (!isOneOfCompoundTypeNodeIds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isAnyOfCompound(value: unknown): value is AnyOfCompound {
	if (!isInterfaceAnyOfCompound(value)) {
		return false;
	}
	return true;
}
function isInterfaceAnyOfCompound(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("typeNodeIds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isAnyOfCompoundType(propertyValue)) {
					return false;
				}
				break;
			case "typeNodeIds":
				if (!isAnyOfCompoundTypeNodeIds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isAllOfCompound(value: unknown): value is AllOfCompound {
	if (!isInterfaceAllOfCompound(value)) {
		return false;
	}
	return true;
}
function isInterfaceAllOfCompound(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	if (!("type" in value)) {
		return false;
	}
	if (!("typeNodeIds" in value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		switch (propertyName) {
			case "type":
				if (!isAllOfCompoundType(propertyValue)) {
					return false;
				}
				break;
			case "typeNodeIds":
				if (!isAllOfCompoundTypeNodeIds(propertyValue)) {
					return false;
				}
				break;
		}
	}
	return true;
}
export function isSuperNodeId(value: unknown): value is SuperNodeId {
	if (!isStringSuperNodeId(value)) {
		return false;
	}
	return true;
}
function isStringSuperNodeId(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isDeprecated(value: unknown): value is Deprecated {
	if (!isBooleanDeprecated(value)) {
		return false;
	}
	return true;
}
function isBooleanDeprecated(value: unknown): value is unknown {
	if (typeof value !== "boolean") {
		return false;
	}
	return true;
}
export function isTitle(value: unknown): value is Title {
	if (!isStringTitle(value)) {
		return false;
	}
	return true;
}
function isStringTitle(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isDescription(value: unknown): value is Description {
	if (!isStringDescription(value)) {
		return false;
	}
	return true;
}
function isStringDescription(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isExamples(value: unknown): value is Examples {
	if (!isArrayExamples(value)) {
		return false;
	}
	return true;
}
function isArrayExamples(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isExamplesItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isTypes(value: unknown): value is Types {
	if (!isArrayTypes(value)) {
		return false;
	}
	return true;
}
function isArrayTypes(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isTypesItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isCompounds(value: unknown): value is Compounds {
	if (!isArrayCompounds(value)) {
		return false;
	}
	return true;
}
function isArrayCompounds(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isCompoundsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isTypeUnionOneOf0(value: unknown): value is TypeUnionOneOf0 {
	if (!isNullType(value)) {
		return false;
	}
	return true;
}
export function isTypeUnionOneOf1(value: unknown): value is TypeUnionOneOf1 {
	if (!isAnyType(value)) {
		return false;
	}
	return true;
}
export function isTypeUnionOneOf2(value: unknown): value is TypeUnionOneOf2 {
	if (!isNeverType(value)) {
		return false;
	}
	return true;
}
export function isOneOf3(value: unknown): value is OneOf3 {
	if (!isBooleanType(value)) {
		return false;
	}
	return true;
}
export function isOneOf4(value: unknown): value is OneOf4 {
	if (!isDefsNumberType(value)) {
		return false;
	}
	return true;
}
export function isOneOf5(value: unknown): value is OneOf5 {
	if (!isStringType(value)) {
		return false;
	}
	return true;
}
export function isOneOf6(value: unknown): value is OneOf6 {
	if (!isTupleType(value)) {
		return false;
	}
	return true;
}
export function isOneOf7(value: unknown): value is OneOf7 {
	if (!isArrayType(value)) {
		return false;
	}
	return true;
}
export function isOneOf8(value: unknown): value is OneOf8 {
	if (!isInterfaceType(value)) {
		return false;
	}
	return true;
}
export function isOneOf9(value: unknown): value is OneOf9 {
	if (!isRecordType(value)) {
		return false;
	}
	return true;
}
export function isCompoundUnionOneOf0(
	value: unknown
): value is CompoundUnionOneOf0 {
	if (!isOneOfCompound(value)) {
		return false;
	}
	return true;
}
export function isCompoundUnionOneOf1(
	value: unknown
): value is CompoundUnionOneOf1 {
	if (!isAnyOfCompound(value)) {
		return false;
	}
	return true;
}
export function isCompoundUnionOneOf2(
	value: unknown
): value is CompoundUnionOneOf2 {
	if (!isAllOfCompound(value)) {
		return false;
	}
	return true;
}
export function isNullTypeType(value: unknown): value is NullTypeType {
	if (!isStringNullTypeType(value)) {
		return false;
	}
	return true;
}
function isStringNullTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "null") {
		return false;
	}
	return true;
}
export function isAnyTypeType(value: unknown): value is AnyTypeType {
	if (!isStringAnyTypeType(value)) {
		return false;
	}
	return true;
}
function isStringAnyTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "any") {
		return false;
	}
	return true;
}
export function isNeverTypeType(value: unknown): value is NeverTypeType {
	if (!isStringNeverTypeType(value)) {
		return false;
	}
	return true;
}
function isStringNeverTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "never") {
		return false;
	}
	return true;
}
export function isBooleanTypeType(value: unknown): value is BooleanTypeType {
	if (!isStringBooleanTypeType(value)) {
		return false;
	}
	return true;
}
function isStringBooleanTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "boolean") {
		return false;
	}
	return true;
}
export function isBooleanTypeOptions(
	value: unknown
): value is BooleanTypeOptions {
	if (!isArrayBooleanTypeOptions(value)) {
		return false;
	}
	return true;
}
function isArrayBooleanTypeOptions(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isBooleanTypeOptionsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isBooleanTypeOptionsItems(
	value: unknown
): value is BooleanTypeOptionsItems {
	if (!isBooleanBooleanTypeOptionsItems(value)) {
		return false;
	}
	return true;
}
function isBooleanBooleanTypeOptionsItems(value: unknown): value is unknown {
	if (typeof value !== "boolean") {
		return false;
	}
	return true;
}
export function isNumberTypeType(value: unknown): value is NumberTypeType {
	if (!isStringNumberTypeType(value)) {
		return false;
	}
	return true;
}
function isStringNumberTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "number") {
		return false;
	}
	return true;
}
export function isPropertiesNumberType(
	value: unknown
): value is PropertiesNumberType {
	if (!isStringPropertiesNumberType(value)) {
		return false;
	}
	return true;
}
function isStringPropertiesNumberType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "integer" && value !== "float") {
		return false;
	}
	return true;
}
export function isNumberTypeOptions(
	value: unknown
): value is NumberTypeOptions {
	if (!isArrayNumberTypeOptions(value)) {
		return false;
	}
	return true;
}
function isArrayNumberTypeOptions(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isNumberTypeOptionsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isMinimumInclusive(value: unknown): value is MinimumInclusive {
	if (!isNumberMinimumInclusive(value)) {
		return false;
	}
	return true;
}
function isNumberMinimumInclusive(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMinimumExclusive(value: unknown): value is MinimumExclusive {
	if (!isNumberMinimumExclusive(value)) {
		return false;
	}
	return true;
}
function isNumberMinimumExclusive(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMaximumInclusive(value: unknown): value is MaximumInclusive {
	if (!isNumberMaximumInclusive(value)) {
		return false;
	}
	return true;
}
function isNumberMaximumInclusive(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMaximumExclusive(value: unknown): value is MaximumExclusive {
	if (!isNumberMaximumExclusive(value)) {
		return false;
	}
	return true;
}
function isNumberMaximumExclusive(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMultipleOf(value: unknown): value is MultipleOf {
	if (!isNumberMultipleOf(value)) {
		return false;
	}
	return true;
}
function isNumberMultipleOf(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isNumberTypeOptionsItems(
	value: unknown
): value is NumberTypeOptionsItems {
	if (!isNumberNumberTypeOptionsItems(value)) {
		return false;
	}
	return true;
}
function isNumberNumberTypeOptionsItems(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isStringTypeType(value: unknown): value is StringTypeType {
	if (!isStringStringTypeType(value)) {
		return false;
	}
	return true;
}
function isStringStringTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "string") {
		return false;
	}
	return true;
}
export function isStringTypeOptions(
	value: unknown
): value is StringTypeOptions {
	if (!isArrayStringTypeOptions(value)) {
		return false;
	}
	return true;
}
function isArrayStringTypeOptions(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isStringTypeOptionsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isMinimumLength(value: unknown): value is MinimumLength {
	if (!isNumberMinimumLength(value)) {
		return false;
	}
	return true;
}
function isNumberMinimumLength(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMaximumLength(value: unknown): value is MaximumLength {
	if (!isNumberMaximumLength(value)) {
		return false;
	}
	return true;
}
function isNumberMaximumLength(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isValuePattern(value: unknown): value is ValuePattern {
	if (!isStringValuePattern(value)) {
		return false;
	}
	return true;
}
function isStringValuePattern(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isStringTypeOptionsItems(
	value: unknown
): value is StringTypeOptionsItems {
	if (!isStringStringTypeOptionsItems(value)) {
		return false;
	}
	return true;
}
function isStringStringTypeOptionsItems(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isTupleTypeType(value: unknown): value is TupleTypeType {
	if (!isStringTupleTypeType(value)) {
		return false;
	}
	return true;
}
function isStringTupleTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "tuple") {
		return false;
	}
	return true;
}
export function isItemTypeNodeIds(value: unknown): value is ItemTypeNodeIds {
	if (!isArrayItemTypeNodeIds(value)) {
		return false;
	}
	return true;
}
function isArrayItemTypeNodeIds(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isItemTypeNodeIdsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isItemTypeNodeIdsItems(
	value: unknown
): value is ItemTypeNodeIdsItems {
	if (!isStringItemTypeNodeIdsItems(value)) {
		return false;
	}
	return true;
}
function isStringItemTypeNodeIdsItems(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isArrayTypeType(value: unknown): value is ArrayTypeType {
	if (!isStringArrayTypeType(value)) {
		return false;
	}
	return true;
}
function isStringArrayTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "array") {
		return false;
	}
	return true;
}
export function isMinimumItems(value: unknown): value is MinimumItems {
	if (!isNumberMinimumItems(value)) {
		return false;
	}
	return true;
}
function isNumberMinimumItems(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMaximumItems(value: unknown): value is MaximumItems {
	if (!isNumberMaximumItems(value)) {
		return false;
	}
	return true;
}
function isNumberMaximumItems(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isUniqueItems(value: unknown): value is UniqueItems {
	if (!isBooleanUniqueItems(value)) {
		return false;
	}
	return true;
}
function isBooleanUniqueItems(value: unknown): value is unknown {
	if (typeof value !== "boolean") {
		return false;
	}
	return true;
}
export function isItemTypeNodeId(value: unknown): value is ItemTypeNodeId {
	if (!isStringItemTypeNodeId(value)) {
		return false;
	}
	return true;
}
function isStringItemTypeNodeId(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isInterfaceTypeType(
	value: unknown
): value is InterfaceTypeType {
	if (!isStringInterfaceTypeType(value)) {
		return false;
	}
	return true;
}
function isStringInterfaceTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "interface") {
		return false;
	}
	return true;
}
export function isInterfaceTypeRequiredProperties(
	value: unknown
): value is InterfaceTypeRequiredProperties {
	if (!isArrayInterfaceTypeRequiredProperties(value)) {
		return false;
	}
	return true;
}
function isArrayInterfaceTypeRequiredProperties(
	value: unknown
): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isInterfaceTypeRequiredPropertiesItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isPropertyTypeNodeIds(
	value: unknown
): value is PropertyTypeNodeIds {
	if (!isRecordPropertyTypeNodeIds(value)) {
		return false;
	}
	return true;
}
function isRecordPropertyTypeNodeIds(value: unknown): value is unknown {
	if (typeof value !== "object" || value === null || Array.isArray(value)) {
		return false;
	}
	for (const propertyName in value) {
		const propertyValue = value[propertyName as keyof typeof value];
		if (!isAdditionalProperties(propertyValue)) {
			return false;
		}
	}
	return true;
}
export function isInterfaceTypeRequiredPropertiesItems(
	value: unknown
): value is InterfaceTypeRequiredPropertiesItems {
	if (!isStringInterfaceTypeRequiredPropertiesItems(value)) {
		return false;
	}
	return true;
}
function isStringInterfaceTypeRequiredPropertiesItems(
	value: unknown
): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isAdditionalProperties(
	value: unknown
): value is AdditionalProperties {
	if (!isStringAdditionalProperties(value)) {
		return false;
	}
	return true;
}
function isStringAdditionalProperties(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isRecordTypeType(value: unknown): value is RecordTypeType {
	if (!isStringRecordTypeType(value)) {
		return false;
	}
	return true;
}
function isStringRecordTypeType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "record") {
		return false;
	}
	return true;
}
export function isRecordTypeRequiredProperties(
	value: unknown
): value is RecordTypeRequiredProperties {
	if (!isArrayRecordTypeRequiredProperties(value)) {
		return false;
	}
	return true;
}
function isArrayRecordTypeRequiredProperties(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isRecordTypeRequiredPropertiesItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isMinimumProperties(
	value: unknown
): value is MinimumProperties {
	if (!isNumberMinimumProperties(value)) {
		return false;
	}
	return true;
}
function isNumberMinimumProperties(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isMaximumProperties(
	value: unknown
): value is MaximumProperties {
	if (!isNumberMaximumProperties(value)) {
		return false;
	}
	return true;
}
function isNumberMaximumProperties(value: unknown): value is unknown {
	if (typeof value !== "number" || isNaN(value)) {
		return false;
	}
	return true;
}
export function isPropertyTypeNodeId(
	value: unknown
): value is PropertyTypeNodeId {
	if (!isStringPropertyTypeNodeId(value)) {
		return false;
	}
	return true;
}
function isStringPropertyTypeNodeId(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isRecordTypeRequiredPropertiesItems(
	value: unknown
): value is RecordTypeRequiredPropertiesItems {
	if (!isStringRecordTypeRequiredPropertiesItems(value)) {
		return false;
	}
	return true;
}
function isStringRecordTypeRequiredPropertiesItems(
	value: unknown
): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isOneOfCompoundType(
	value: unknown
): value is OneOfCompoundType {
	if (!isStringOneOfCompoundType(value)) {
		return false;
	}
	return true;
}
function isStringOneOfCompoundType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "one-of") {
		return false;
	}
	return true;
}
export function isOneOfCompoundTypeNodeIds(
	value: unknown
): value is OneOfCompoundTypeNodeIds {
	if (!isArrayOneOfCompoundTypeNodeIds(value)) {
		return false;
	}
	return true;
}
function isArrayOneOfCompoundTypeNodeIds(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isOneOfCompoundTypeNodeIdsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isOneOfCompoundTypeNodeIdsItems(
	value: unknown
): value is OneOfCompoundTypeNodeIdsItems {
	if (!isStringOneOfCompoundTypeNodeIdsItems(value)) {
		return false;
	}
	return true;
}
function isStringOneOfCompoundTypeNodeIdsItems(
	value: unknown
): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isAnyOfCompoundType(
	value: unknown
): value is AnyOfCompoundType {
	if (!isStringAnyOfCompoundType(value)) {
		return false;
	}
	return true;
}
function isStringAnyOfCompoundType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "any-of") {
		return false;
	}
	return true;
}
export function isAnyOfCompoundTypeNodeIds(
	value: unknown
): value is AnyOfCompoundTypeNodeIds {
	if (!isArrayAnyOfCompoundTypeNodeIds(value)) {
		return false;
	}
	return true;
}
function isArrayAnyOfCompoundTypeNodeIds(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isAnyOfCompoundTypeNodeIdsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isAnyOfCompoundTypeNodeIdsItems(
	value: unknown
): value is AnyOfCompoundTypeNodeIdsItems {
	if (!isStringAnyOfCompoundTypeNodeIdsItems(value)) {
		return false;
	}
	return true;
}
function isStringAnyOfCompoundTypeNodeIdsItems(
	value: unknown
): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isAllOfCompoundType(
	value: unknown
): value is AllOfCompoundType {
	if (!isStringAllOfCompoundType(value)) {
		return false;
	}
	return true;
}
function isStringAllOfCompoundType(value: unknown): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	if (value !== "all-of") {
		return false;
	}
	return true;
}
export function isAllOfCompoundTypeNodeIds(
	value: unknown
): value is AllOfCompoundTypeNodeIds {
	if (!isArrayAllOfCompoundTypeNodeIds(value)) {
		return false;
	}
	return true;
}
function isArrayAllOfCompoundTypeNodeIds(value: unknown): value is unknown {
	if (!Array.isArray(value)) {
		return false;
	}
	for (const elementIndex in value) {
		const elementValue = value[elementIndex];
		if (!isAllOfCompoundTypeNodeIdsItems(elementValue)) {
			return false;
		}
	}
	return true;
}
export function isAllOfCompoundTypeNodeIdsItems(
	value: unknown
): value is AllOfCompoundTypeNodeIdsItems {
	if (!isStringAllOfCompoundTypeNodeIdsItems(value)) {
		return false;
	}
	return true;
}
function isStringAllOfCompoundTypeNodeIdsItems(
	value: unknown
): value is unknown {
	if (typeof value !== "string") {
		return false;
	}
	return true;
}
export function isExamplesItems(value: unknown): value is ExamplesItems {
	if (!isAnyExamplesItems(value)) {
		return false;
	}
	return true;
}
function isAnyExamplesItems(value: unknown): value is unknown {
	return true;
}
export function isTypesItems(value: unknown): value is TypesItems {
	if (!isTypeUnion(value)) {
		return false;
	}
	return true;
}
export function isCompoundsItems(value: unknown): value is CompoundsItems {
	if (!isCompoundUnion(value)) {
		return false;
	}
	return true;
}
