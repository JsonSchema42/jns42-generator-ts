// @generated by
//     __             _____     _                 ___ ___ 
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org

/* eslint-disable */
/* spellchecker: disable */

import * as types from "./types.js";
export function isSchema(value: unknown): value is types.Schema {
    if (!(isInterfaceSchema(value) || isBooleanSchema(value))) {
        return false;
    }
    if (!(isAllOfSchema(value))) {
        return false;
    }
    return true;
}
function isInterfaceSchema(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "definitions":
                if (!isSchemaDefinitions(propertyValue)) {
                    return false;
                }
                break;
            case "dependencies":
                if (!isSchemaDependencies(propertyValue)) {
                    return false;
                }
                break;
            case "$recursiveAnchor":
                if (!isSchemaRecursiveanchor(propertyValue)) {
                    return false;
                }
                break;
            case "$recursiveRef":
                if (!isSchemaRecursiveref(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanSchema(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
function isAllOfSchema(value: unknown): value is unknown {
    if (!isSchema0(value)) {
        return false;
    }
    if (!isSchema1(value)) {
        return false;
    }
    if (!isSchema2(value)) {
        return false;
    }
    if (!isSchema3(value)) {
        return false;
    }
    if (!isSchema4(value)) {
        return false;
    }
    if (!isSchema5(value)) {
        return false;
    }
    if (!isSchema6(value)) {
        return false;
    }
    return true;
}
export function isSchemaDefinitions(value: unknown): value is types.SchemaDefinitions {
    if (!(isRecordSchemaDefinitions(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDefinitions(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDefinitionsAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaDefinitionsAdditionalproperties(value: unknown): value is types.SchemaDefinitionsAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependencies(value: unknown): value is types.SchemaDependencies {
    if (!(isRecordSchemaDependencies(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDependencies(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDependenciesAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaDependenciesAdditionalproperties(value: unknown): value is types.SchemaDependenciesAdditionalproperties {
    if (!(isAnyOfSchemaDependenciesAdditionalproperties(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaDependenciesAdditionalproperties(value: unknown): value is unknown {
    if (isSchemaDependenciesAdditionalproperties0(value)) {
        return true;
    }
    if (isSchemaDependenciesAdditionalproperties1(value)) {
        return true;
    }
    return false;
}
export function isSchemaDependenciesAdditionalproperties0(value: unknown): value is types.SchemaDependenciesAdditionalproperties0 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependenciesAdditionalproperties1(value: unknown): value is types.SchemaDependenciesAdditionalproperties1 {
    if (!isValidationStringarray(value)) {
        return false;
    }
    return true;
}
export function isSchemaRecursiveanchor(value: unknown): value is types.SchemaRecursiveanchor {
    if (!isCoreAnchorstring(value)) {
        return false;
    }
    return true;
}
export function isSchemaRecursiveref(value: unknown): value is types.SchemaRecursiveref {
    if (!isCoreUrireferencestring(value)) {
        return false;
    }
    return true;
}
export function isSchema0(value: unknown): value is types.Schema0 {
    if (!isCore(value)) {
        return false;
    }
    return true;
}
export function isSchema1(value: unknown): value is types.Schema1 {
    if (!isApplicator(value)) {
        return false;
    }
    return true;
}
export function isSchema2(value: unknown): value is types.Schema2 {
    if (!isUnevaluated(value)) {
        return false;
    }
    return true;
}
export function isSchema3(value: unknown): value is types.Schema3 {
    if (!isValidation(value)) {
        return false;
    }
    return true;
}
export function isSchema4(value: unknown): value is types.Schema4 {
    if (!isMetaData(value)) {
        return false;
    }
    return true;
}
export function isSchema5(value: unknown): value is types.Schema5 {
    if (!isFormatAnnotation(value)) {
        return false;
    }
    return true;
}
export function isSchema6(value: unknown): value is types.Schema6 {
    if (!isContent(value)) {
        return false;
    }
    return true;
}
export function isCore(value: unknown): value is types.Core {
    if (!(isInterfaceCore(value) || isBooleanCore(value))) {
        return false;
    }
    return true;
}
function isInterfaceCore(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "$id":
                if (!isCoreId(propertyValue)) {
                    return false;
                }
                break;
            case "$schema":
                if (!isCoreSchema(propertyValue)) {
                    return false;
                }
                break;
            case "$ref":
                if (!isCoreRef(propertyValue)) {
                    return false;
                }
                break;
            case "$anchor":
                if (!isCoreAnchor(propertyValue)) {
                    return false;
                }
                break;
            case "$dynamicRef":
                if (!isCoreDynamicref(propertyValue)) {
                    return false;
                }
                break;
            case "$dynamicAnchor":
                if (!isCoreDynamicanchor(propertyValue)) {
                    return false;
                }
                break;
            case "$vocabulary":
                if (!isCoreVocabulary(propertyValue)) {
                    return false;
                }
                break;
            case "$comment":
                if (!isCoreComment(propertyValue)) {
                    return false;
                }
                break;
            case "$defs":
                if (!isCoreDefs(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanCore(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isCoreAnchorstring(value: unknown): value is types.CoreAnchorstring {
    if (!(isStringCoreAnchorstring(value))) {
        return false;
    }
    return true;
}
function isStringCoreAnchorstring(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    if (!/^[A-Za-z_][-A-Za-z0-9._]*$/.test(value)) {
        return false;
    }
    return true;
}
export function isCoreUristring(value: unknown): value is types.CoreUristring {
    if (!(isStringCoreUristring(value))) {
        return false;
    }
    return true;
}
function isStringCoreUristring(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreUrireferencestring(value: unknown): value is types.CoreUrireferencestring {
    if (!(isStringCoreUrireferencestring(value))) {
        return false;
    }
    return true;
}
function isStringCoreUrireferencestring(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreId(value: unknown): value is types.CoreId {
    if (!isCoreUrireferencestring(value)) {
        return false;
    }
    return true;
}
export function isCoreSchema(value: unknown): value is types.CoreSchema {
    if (!isCoreUristring(value)) {
        return false;
    }
    return true;
}
export function isCoreRef(value: unknown): value is types.CoreRef {
    if (!isCoreUrireferencestring(value)) {
        return false;
    }
    return true;
}
export function isCoreAnchor(value: unknown): value is types.CoreAnchor {
    if (!isCoreAnchorstring(value)) {
        return false;
    }
    return true;
}
export function isCoreDynamicref(value: unknown): value is types.CoreDynamicref {
    if (!isCoreUrireferencestring(value)) {
        return false;
    }
    return true;
}
export function isCoreDynamicanchor(value: unknown): value is types.CoreDynamicanchor {
    if (!isCoreAnchorstring(value)) {
        return false;
    }
    return true;
}
export function isCoreVocabulary(value: unknown): value is types.CoreVocabulary {
    if (!(isRecordCoreVocabulary(value))) {
        return false;
    }
    return true;
}
function isRecordCoreVocabulary(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isCoreVocabularyAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isCoreVocabularyAdditionalproperties(value: unknown): value is types.CoreVocabularyAdditionalproperties {
    if (!(isBooleanCoreVocabularyAdditionalproperties(value))) {
        return false;
    }
    return true;
}
function isBooleanCoreVocabularyAdditionalproperties(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isCoreComment(value: unknown): value is types.CoreComment {
    if (!(isStringCoreComment(value))) {
        return false;
    }
    return true;
}
function isStringCoreComment(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreDefs(value: unknown): value is types.CoreDefs {
    if (!(isRecordCoreDefs(value))) {
        return false;
    }
    return true;
}
function isRecordCoreDefs(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isCoreDefsAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isCoreDefsAdditionalproperties(value: unknown): value is types.CoreDefsAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicator(value: unknown): value is types.Applicator {
    if (!(isInterfaceApplicator(value) || isBooleanApplicator(value))) {
        return false;
    }
    return true;
}
function isInterfaceApplicator(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "prefixItems":
                if (!isApplicatorPrefixitems(propertyValue)) {
                    return false;
                }
                break;
            case "items":
                if (!isApplicatorItems(propertyValue)) {
                    return false;
                }
                break;
            case "contains":
                if (!isApplicatorContains(propertyValue)) {
                    return false;
                }
                break;
            case "additionalProperties":
                if (!isApplicatorAdditionalproperties(propertyValue)) {
                    return false;
                }
                break;
            case "properties":
                if (!isApplicatorProperties(propertyValue)) {
                    return false;
                }
                break;
            case "patternProperties":
                if (!isApplicatorPatternproperties(propertyValue)) {
                    return false;
                }
                break;
            case "dependentSchemas":
                if (!isApplicatorDependentschemas(propertyValue)) {
                    return false;
                }
                break;
            case "propertyNames":
                if (!isApplicatorPropertynames(propertyValue)) {
                    return false;
                }
                break;
            case "if":
                if (!isApplicatorIf(propertyValue)) {
                    return false;
                }
                break;
            case "then":
                if (!isApplicatorThen(propertyValue)) {
                    return false;
                }
                break;
            case "else":
                if (!isApplicatorElse(propertyValue)) {
                    return false;
                }
                break;
            case "allOf":
                if (!isApplicatorAllof(propertyValue)) {
                    return false;
                }
                break;
            case "anyOf":
                if (!isApplicatorAnyof(propertyValue)) {
                    return false;
                }
                break;
            case "oneOf":
                if (!isApplicatorOneof(propertyValue)) {
                    return false;
                }
                break;
            case "not":
                if (!isApplicatorNot(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanApplicator(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isApplicatorSchemaarray(value: unknown): value is types.ApplicatorSchemaarray {
    if (!(isArrayApplicatorSchemaarray(value))) {
        return false;
    }
    return true;
}
function isArrayApplicatorSchemaarray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isApplicatorSchemaarrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorSchemaarrayItems(value: unknown): value is types.ApplicatorSchemaarrayItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPrefixitems(value: unknown): value is types.ApplicatorPrefixitems {
    if (!isApplicatorSchemaarray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorItems(value: unknown): value is types.ApplicatorItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorContains(value: unknown): value is types.ApplicatorContains {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAdditionalproperties(value: unknown): value is types.ApplicatorAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorProperties(value: unknown): value is types.ApplicatorProperties {
    if (!(isRecordApplicatorProperties(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorProperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorPropertiesAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorPropertiesAdditionalproperties(value: unknown): value is types.ApplicatorPropertiesAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPatternproperties(value: unknown): value is types.ApplicatorPatternproperties {
    if (!(isRecordApplicatorPatternproperties(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorPatternproperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorPatternpropertiesAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorPatternpropertiesAdditionalproperties(value: unknown): value is types.ApplicatorPatternpropertiesAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorDependentschemas(value: unknown): value is types.ApplicatorDependentschemas {
    if (!(isRecordApplicatorDependentschemas(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorDependentschemas(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorDependentschemasAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorDependentschemasAdditionalproperties(value: unknown): value is types.ApplicatorDependentschemasAdditionalproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPropertynames(value: unknown): value is types.ApplicatorPropertynames {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorIf(value: unknown): value is types.ApplicatorIf {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorThen(value: unknown): value is types.ApplicatorThen {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorElse(value: unknown): value is types.ApplicatorElse {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAllof(value: unknown): value is types.ApplicatorAllof {
    if (!isApplicatorSchemaarray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAnyof(value: unknown): value is types.ApplicatorAnyof {
    if (!isApplicatorSchemaarray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorOneof(value: unknown): value is types.ApplicatorOneof {
    if (!isApplicatorSchemaarray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorNot(value: unknown): value is types.ApplicatorNot {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isUnevaluated(value: unknown): value is types.Unevaluated {
    if (!(isInterfaceUnevaluated(value) || isBooleanUnevaluated(value))) {
        return false;
    }
    return true;
}
function isInterfaceUnevaluated(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "unevaluatedItems":
                if (!isUnevaluatedUnevaluateditems(propertyValue)) {
                    return false;
                }
                break;
            case "unevaluatedProperties":
                if (!isUnevaluatedUnevaluatedproperties(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanUnevaluated(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isUnevaluatedUnevaluateditems(value: unknown): value is types.UnevaluatedUnevaluateditems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isUnevaluatedUnevaluatedproperties(value: unknown): value is types.UnevaluatedUnevaluatedproperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isValidation(value: unknown): value is types.Validation {
    if (!(isInterfaceValidation(value) || isBooleanValidation(value))) {
        return false;
    }
    return true;
}
function isInterfaceValidation(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "type":
                if (!isValidationType(propertyValue)) {
                    return false;
                }
                break;
            case "const":
                if (!isValidationConst(propertyValue)) {
                    return false;
                }
                break;
            case "enum":
                if (!isValidationEnum(propertyValue)) {
                    return false;
                }
                break;
            case "multipleOf":
                if (!isValidationMultipleof(propertyValue)) {
                    return false;
                }
                break;
            case "maximum":
                if (!isValidationMaximum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMaximum":
                if (!isValidationExclusivemaximum(propertyValue)) {
                    return false;
                }
                break;
            case "minimum":
                if (!isValidationMinimum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMinimum":
                if (!isValidationExclusiveminimum(propertyValue)) {
                    return false;
                }
                break;
            case "maxLength":
                if (!isValidationMaxlength(propertyValue)) {
                    return false;
                }
                break;
            case "minLength":
                if (!isValidationMinlength(propertyValue)) {
                    return false;
                }
                break;
            case "pattern":
                if (!isValidationPattern(propertyValue)) {
                    return false;
                }
                break;
            case "maxItems":
                if (!isValidationMaxitems(propertyValue)) {
                    return false;
                }
                break;
            case "minItems":
                if (!isValidationMinitems(propertyValue)) {
                    return false;
                }
                break;
            case "uniqueItems":
                if (!isValidationUniqueitems(propertyValue)) {
                    return false;
                }
                break;
            case "maxContains":
                if (!isValidationMaxcontains(propertyValue)) {
                    return false;
                }
                break;
            case "minContains":
                if (!isValidationMincontains(propertyValue)) {
                    return false;
                }
                break;
            case "maxProperties":
                if (!isValidationMaxproperties(propertyValue)) {
                    return false;
                }
                break;
            case "minProperties":
                if (!isValidationMinproperties(propertyValue)) {
                    return false;
                }
                break;
            case "required":
                if (!isValidationRequired(propertyValue)) {
                    return false;
                }
                break;
            case "dependentRequired":
                if (!isValidationDependentrequired(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanValidation(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isValidationNonnegativeinteger(value: unknown): value is types.ValidationNonnegativeinteger {
    if (!(isNumberValidationNonnegativeinteger(value))) {
        return false;
    }
    return true;
}
function isNumberValidationNonnegativeinteger(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value % 1 !== 0) {
        return false;
    }
    if (value < 0) {
        return false;
    }
    return true;
}
export function isValidationNonnegativeintegerdefault0(value: unknown): value is types.ValidationNonnegativeintegerdefault0 {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationSimpletypes(value: unknown): value is types.ValidationSimpletypes {
    return true;
}
export function isValidationStringarray(value: unknown): value is types.ValidationStringarray {
    if (!(isArrayValidationStringarray(value))) {
        return false;
    }
    return true;
}
function isArrayValidationStringarray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    const elementValueSeen = new Set<types.ValidationStringarrayItems>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isValidationStringarrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationStringarrayItems(value: unknown): value is types.ValidationStringarrayItems {
    if (!(isStringValidationStringarrayItems(value))) {
        return false;
    }
    return true;
}
function isStringValidationStringarrayItems(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isValidationType(value: unknown): value is types.ValidationType {
    if (!(isAnyOfValidationType(value))) {
        return false;
    }
    return true;
}
function isAnyOfValidationType(value: unknown): value is unknown {
    if (isValidationType0(value)) {
        return true;
    }
    if (isValidationType1(value)) {
        return true;
    }
    return false;
}
export function isValidationType0(value: unknown): value is types.ValidationType0 {
    if (!isValidationSimpletypes(value)) {
        return false;
    }
    return true;
}
export function isValidationType1(value: unknown): value is types.ValidationType1 {
    if (!(isArrayValidationType1(value))) {
        return false;
    }
    return true;
}
function isArrayValidationType1(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    const elementValueSeen = new Set<types.ValidationType1Items>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isValidationType1Items(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationType1Items(value: unknown): value is types.ValidationType1Items {
    if (!isValidationSimpletypes(value)) {
        return false;
    }
    return true;
}
export function isValidationConst(value: unknown): value is types.ValidationConst {
    if (!(isAnyValidationConst(value))) {
        return false;
    }
    return true;
}
function isAnyValidationConst(value: unknown): value is unknown {
    return true;
}
export function isValidationEnum(value: unknown): value is types.ValidationEnum {
    if (!(isArrayValidationEnum(value))) {
        return false;
    }
    return true;
}
function isArrayValidationEnum(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isValidationEnumItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationEnumItems(value: unknown): value is types.ValidationEnumItems {
    if (!(isAnyValidationEnumItems(value))) {
        return false;
    }
    return true;
}
function isAnyValidationEnumItems(value: unknown): value is unknown {
    return true;
}
export function isValidationMultipleof(value: unknown): value is types.ValidationMultipleof {
    if (!(isNumberValidationMultipleof(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMultipleof(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value <= 0) {
        return false;
    }
    return true;
}
export function isValidationMaximum(value: unknown): value is types.ValidationMaximum {
    if (!(isNumberValidationMaximum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMaximum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationExclusivemaximum(value: unknown): value is types.ValidationExclusivemaximum {
    if (!(isNumberValidationExclusivemaximum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationExclusivemaximum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationMinimum(value: unknown): value is types.ValidationMinimum {
    if (!(isNumberValidationMinimum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMinimum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationExclusiveminimum(value: unknown): value is types.ValidationExclusiveminimum {
    if (!(isNumberValidationExclusiveminimum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationExclusiveminimum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationMaxlength(value: unknown): value is types.ValidationMaxlength {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinlength(value: unknown): value is types.ValidationMinlength {
    if (!isValidationNonnegativeintegerdefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationPattern(value: unknown): value is types.ValidationPattern {
    if (!(isStringValidationPattern(value))) {
        return false;
    }
    return true;
}
function isStringValidationPattern(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isValidationMaxitems(value: unknown): value is types.ValidationMaxitems {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinitems(value: unknown): value is types.ValidationMinitems {
    if (!isValidationNonnegativeintegerdefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationUniqueitems(value: unknown): value is types.ValidationUniqueitems {
    if (!(isBooleanValidationUniqueitems(value))) {
        return false;
    }
    return true;
}
function isBooleanValidationUniqueitems(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isValidationMaxcontains(value: unknown): value is types.ValidationMaxcontains {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMincontains(value: unknown): value is types.ValidationMincontains {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMaxproperties(value: unknown): value is types.ValidationMaxproperties {
    if (!isValidationNonnegativeinteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinproperties(value: unknown): value is types.ValidationMinproperties {
    if (!isValidationNonnegativeintegerdefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationRequired(value: unknown): value is types.ValidationRequired {
    if (!isValidationStringarray(value)) {
        return false;
    }
    return true;
}
export function isValidationDependentrequired(value: unknown): value is types.ValidationDependentrequired {
    if (!(isRecordValidationDependentrequired(value))) {
        return false;
    }
    return true;
}
function isRecordValidationDependentrequired(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isValidationDependentrequiredAdditionalproperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationDependentrequiredAdditionalproperties(value: unknown): value is types.ValidationDependentrequiredAdditionalproperties {
    if (!isValidationStringarray(value)) {
        return false;
    }
    return true;
}
export function isMetaData(value: unknown): value is types.MetaData {
    if (!(isInterfaceMetaData(value) || isBooleanMetaData(value))) {
        return false;
    }
    return true;
}
function isInterfaceMetaData(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "title":
                if (!isMetaDataTitle(propertyValue)) {
                    return false;
                }
                break;
            case "description":
                if (!isMetaDataDescription(propertyValue)) {
                    return false;
                }
                break;
            case "default":
                if (!isMetaDataDefault(propertyValue)) {
                    return false;
                }
                break;
            case "deprecated":
                if (!isMetaDataDeprecated(propertyValue)) {
                    return false;
                }
                break;
            case "readOnly":
                if (!isMetaDataReadonly(propertyValue)) {
                    return false;
                }
                break;
            case "writeOnly":
                if (!isMetaDataWriteonly(propertyValue)) {
                    return false;
                }
                break;
            case "examples":
                if (!isMetaDataExamples(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanMetaData(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataTitle(value: unknown): value is types.MetaDataTitle {
    if (!(isStringMetaDataTitle(value))) {
        return false;
    }
    return true;
}
function isStringMetaDataTitle(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isMetaDataDescription(value: unknown): value is types.MetaDataDescription {
    if (!(isStringMetaDataDescription(value))) {
        return false;
    }
    return true;
}
function isStringMetaDataDescription(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isMetaDataDefault(value: unknown): value is types.MetaDataDefault {
    if (!(isAnyMetaDataDefault(value))) {
        return false;
    }
    return true;
}
function isAnyMetaDataDefault(value: unknown): value is unknown {
    return true;
}
export function isMetaDataDeprecated(value: unknown): value is types.MetaDataDeprecated {
    if (!(isBooleanMetaDataDeprecated(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataDeprecated(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataReadonly(value: unknown): value is types.MetaDataReadonly {
    if (!(isBooleanMetaDataReadonly(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataReadonly(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataWriteonly(value: unknown): value is types.MetaDataWriteonly {
    if (!(isBooleanMetaDataWriteonly(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataWriteonly(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataExamples(value: unknown): value is types.MetaDataExamples {
    if (!(isArrayMetaDataExamples(value))) {
        return false;
    }
    return true;
}
function isArrayMetaDataExamples(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isMetaDataExamplesItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isMetaDataExamplesItems(value: unknown): value is types.MetaDataExamplesItems {
    if (!(isAnyMetaDataExamplesItems(value))) {
        return false;
    }
    return true;
}
function isAnyMetaDataExamplesItems(value: unknown): value is unknown {
    return true;
}
export function isFormatAnnotation(value: unknown): value is types.FormatAnnotation {
    if (!(isInterfaceFormatAnnotation(value) || isBooleanFormatAnnotation(value))) {
        return false;
    }
    return true;
}
function isInterfaceFormatAnnotation(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "format":
                if (!isFormatAnnotationFormat(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanFormatAnnotation(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isFormatAnnotationFormat(value: unknown): value is types.FormatAnnotationFormat {
    if (!(isStringFormatAnnotationFormat(value))) {
        return false;
    }
    return true;
}
function isStringFormatAnnotationFormat(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContent(value: unknown): value is types.Content {
    if (!(isInterfaceContent(value) || isBooleanContent(value))) {
        return false;
    }
    return true;
}
function isInterfaceContent(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "contentEncoding":
                if (!isContentContentencoding(propertyValue)) {
                    return false;
                }
                break;
            case "contentMediaType":
                if (!isContentContentmediatype(propertyValue)) {
                    return false;
                }
                break;
            case "contentSchema":
                if (!isContentContentschema(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanContent(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isContentContentencoding(value: unknown): value is types.ContentContentencoding {
    if (!(isStringContentContentencoding(value))) {
        return false;
    }
    return true;
}
function isStringContentContentencoding(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContentContentmediatype(value: unknown): value is types.ContentContentmediatype {
    if (!(isStringContentContentmediatype(value))) {
        return false;
    }
    return true;
}
function isStringContentContentmediatype(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContentContentschema(value: unknown): value is types.ContentContentschema {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
