// @generated by
//     __             _____     _                 ___ ___ 
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
//                                 -- www.JsonSchema42.org

/* eslint-disable */
/* spellchecker: disable */

import * as types from "./types.js";
export function isSchema(value: unknown): value is types.Schema {
    if (!(isInterfaceSchema(value) || isBooleanSchema(value))) {
        return false;
    }
    if (!(isAllOfSchema(value))) {
        return false;
    }
    return true;
}
function isInterfaceSchema(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "definitions":
                if (!isSchemaDefinitions(propertyValue)) {
                    return false;
                }
                break;
            case "dependencies":
                if (!isSchemaDependencies(propertyValue)) {
                    return false;
                }
                break;
            case "$recursiveAnchor":
                if (!isSchemaRecursiveAnchor(propertyValue)) {
                    return false;
                }
                break;
            case "$recursiveRef":
                if (!isSchemaRecursiveRef(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanSchema(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
function isAllOfSchema(value: unknown): value is unknown {
    if (!isSchema0(value)) {
        return false;
    }
    if (!isSchema1(value)) {
        return false;
    }
    if (!isSchema2(value)) {
        return false;
    }
    if (!isSchema3(value)) {
        return false;
    }
    if (!isSchema4(value)) {
        return false;
    }
    if (!isSchema5(value)) {
        return false;
    }
    if (!isSchema6(value)) {
        return false;
    }
    return true;
}
export function isSchemaDefinitions(value: unknown): value is types.SchemaDefinitions {
    if (!(isRecordSchemaDefinitions(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDefinitions(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDefinitionsAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaDefinitionsAdditionalProperties(value: unknown): value is types.SchemaDefinitionsAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependencies(value: unknown): value is types.SchemaDependencies {
    if (!(isRecordSchemaDependencies(value))) {
        return false;
    }
    return true;
}
function isRecordSchemaDependencies(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isSchemaDependenciesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isSchemaDependenciesAdditionalProperties(value: unknown): value is types.SchemaDependenciesAdditionalProperties {
    if (!(isAnyOfSchemaDependenciesAdditionalProperties(value))) {
        return false;
    }
    return true;
}
function isAnyOfSchemaDependenciesAdditionalProperties(value: unknown): value is unknown {
    if (isSchemaDependenciesAdditionalProperties0(value)) {
        return true;
    }
    if (isSchemaDependenciesAdditionalProperties1(value)) {
        return true;
    }
    return false;
}
export function isSchemaDependenciesAdditionalProperties0(value: unknown): value is types.SchemaDependenciesAdditionalProperties0 {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isSchemaDependenciesAdditionalProperties1(value: unknown): value is types.SchemaDependenciesAdditionalProperties1 {
    if (!isValidationStringArray(value)) {
        return false;
    }
    return true;
}
export function isSchemaRecursiveAnchor(value: unknown): value is types.SchemaRecursiveAnchor {
    if (!isCoreAnchorString(value)) {
        return false;
    }
    return true;
}
export function isSchemaRecursiveRef(value: unknown): value is types.SchemaRecursiveRef {
    if (!isCoreUriReferenceString(value)) {
        return false;
    }
    return true;
}
export function isSchema0(value: unknown): value is types.Schema0 {
    if (!isCore(value)) {
        return false;
    }
    return true;
}
export function isSchema1(value: unknown): value is types.Schema1 {
    if (!isApplicator(value)) {
        return false;
    }
    return true;
}
export function isSchema2(value: unknown): value is types.Schema2 {
    if (!isUnevaluated(value)) {
        return false;
    }
    return true;
}
export function isSchema3(value: unknown): value is types.Schema3 {
    if (!isValidation(value)) {
        return false;
    }
    return true;
}
export function isSchema4(value: unknown): value is types.Schema4 {
    if (!isMetaData(value)) {
        return false;
    }
    return true;
}
export function isSchema5(value: unknown): value is types.Schema5 {
    if (!isFormatAnnotation(value)) {
        return false;
    }
    return true;
}
export function isSchema6(value: unknown): value is types.Schema6 {
    if (!isContent(value)) {
        return false;
    }
    return true;
}
export function isCore(value: unknown): value is types.Core {
    if (!(isInterfaceCore(value) || isBooleanCore(value))) {
        return false;
    }
    return true;
}
function isInterfaceCore(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "$id":
                if (!isCoreId(propertyValue)) {
                    return false;
                }
                break;
            case "$schema":
                if (!isCoreSchema(propertyValue)) {
                    return false;
                }
                break;
            case "$ref":
                if (!isCoreRef(propertyValue)) {
                    return false;
                }
                break;
            case "$anchor":
                if (!isCoreAnchor(propertyValue)) {
                    return false;
                }
                break;
            case "$dynamicRef":
                if (!isCoreDynamicRef(propertyValue)) {
                    return false;
                }
                break;
            case "$dynamicAnchor":
                if (!isCoreDynamicAnchor(propertyValue)) {
                    return false;
                }
                break;
            case "$vocabulary":
                if (!isCoreVocabulary(propertyValue)) {
                    return false;
                }
                break;
            case "$comment":
                if (!isCoreComment(propertyValue)) {
                    return false;
                }
                break;
            case "$defs":
                if (!isCoreDefs(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanCore(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isCoreAnchorString(value: unknown): value is types.CoreAnchorString {
    if (!(isStringCoreAnchorString(value))) {
        return false;
    }
    return true;
}
function isStringCoreAnchorString(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    if (!/^[A-Za-z_][-A-Za-z0-9._]*$/.test(value)) {
        return false;
    }
    return true;
}
export function isCoreUriString(value: unknown): value is types.CoreUriString {
    if (!(isStringCoreUriString(value))) {
        return false;
    }
    return true;
}
function isStringCoreUriString(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreUriReferenceString(value: unknown): value is types.CoreUriReferenceString {
    if (!(isStringCoreUriReferenceString(value))) {
        return false;
    }
    return true;
}
function isStringCoreUriReferenceString(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreId(value: unknown): value is types.CoreId {
    if (!isCoreUriReferenceString(value)) {
        return false;
    }
    return true;
}
export function isCoreSchema(value: unknown): value is types.CoreSchema {
    if (!isCoreUriString(value)) {
        return false;
    }
    return true;
}
export function isCoreRef(value: unknown): value is types.CoreRef {
    if (!isCoreUriReferenceString(value)) {
        return false;
    }
    return true;
}
export function isCoreAnchor(value: unknown): value is types.CoreAnchor {
    if (!isCoreAnchorString(value)) {
        return false;
    }
    return true;
}
export function isCoreDynamicRef(value: unknown): value is types.CoreDynamicRef {
    if (!isCoreUriReferenceString(value)) {
        return false;
    }
    return true;
}
export function isCoreDynamicAnchor(value: unknown): value is types.CoreDynamicAnchor {
    if (!isCoreAnchorString(value)) {
        return false;
    }
    return true;
}
export function isCoreVocabulary(value: unknown): value is types.CoreVocabulary {
    if (!(isRecordCoreVocabulary(value))) {
        return false;
    }
    return true;
}
function isRecordCoreVocabulary(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isCoreVocabularyAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isCoreVocabularyAdditionalProperties(value: unknown): value is types.CoreVocabularyAdditionalProperties {
    if (!(isBooleanCoreVocabularyAdditionalProperties(value))) {
        return false;
    }
    return true;
}
function isBooleanCoreVocabularyAdditionalProperties(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isCoreComment(value: unknown): value is types.CoreComment {
    if (!(isStringCoreComment(value))) {
        return false;
    }
    return true;
}
function isStringCoreComment(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isCoreDefs(value: unknown): value is types.CoreDefs {
    if (!(isRecordCoreDefs(value))) {
        return false;
    }
    return true;
}
function isRecordCoreDefs(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isCoreDefsAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isCoreDefsAdditionalProperties(value: unknown): value is types.CoreDefsAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicator(value: unknown): value is types.Applicator {
    if (!(isInterfaceApplicator(value) || isBooleanApplicator(value))) {
        return false;
    }
    return true;
}
function isInterfaceApplicator(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "prefixItems":
                if (!isApplicatorPrefixItems(propertyValue)) {
                    return false;
                }
                break;
            case "items":
                if (!isApplicatorItems(propertyValue)) {
                    return false;
                }
                break;
            case "contains":
                if (!isApplicatorContains(propertyValue)) {
                    return false;
                }
                break;
            case "additionalProperties":
                if (!isApplicatorAdditionalProperties(propertyValue)) {
                    return false;
                }
                break;
            case "properties":
                if (!isApplicatorProperties(propertyValue)) {
                    return false;
                }
                break;
            case "patternProperties":
                if (!isApplicatorPatternProperties(propertyValue)) {
                    return false;
                }
                break;
            case "dependentSchemas":
                if (!isApplicatorDependentSchemas(propertyValue)) {
                    return false;
                }
                break;
            case "propertyNames":
                if (!isApplicatorPropertyNames(propertyValue)) {
                    return false;
                }
                break;
            case "if":
                if (!isApplicatorIf(propertyValue)) {
                    return false;
                }
                break;
            case "then":
                if (!isApplicatorThen(propertyValue)) {
                    return false;
                }
                break;
            case "else":
                if (!isApplicatorElse(propertyValue)) {
                    return false;
                }
                break;
            case "allOf":
                if (!isApplicatorAllOf(propertyValue)) {
                    return false;
                }
                break;
            case "anyOf":
                if (!isApplicatorAnyOf(propertyValue)) {
                    return false;
                }
                break;
            case "oneOf":
                if (!isApplicatorOneOf(propertyValue)) {
                    return false;
                }
                break;
            case "not":
                if (!isApplicatorNot(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanApplicator(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isApplicatorSchemaArray(value: unknown): value is types.ApplicatorSchemaArray {
    if (!(isArrayApplicatorSchemaArray(value))) {
        return false;
    }
    return true;
}
function isArrayApplicatorSchemaArray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isApplicatorSchemaArrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorSchemaArrayItems(value: unknown): value is types.ApplicatorSchemaArrayItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPrefixItems(value: unknown): value is types.ApplicatorPrefixItems {
    if (!isApplicatorSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorItems(value: unknown): value is types.ApplicatorItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorContains(value: unknown): value is types.ApplicatorContains {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAdditionalProperties(value: unknown): value is types.ApplicatorAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorProperties(value: unknown): value is types.ApplicatorProperties {
    if (!(isRecordApplicatorProperties(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorProperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorPropertiesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorPropertiesAdditionalProperties(value: unknown): value is types.ApplicatorPropertiesAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPatternProperties(value: unknown): value is types.ApplicatorPatternProperties {
    if (!(isRecordApplicatorPatternProperties(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorPatternProperties(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorPatternPropertiesAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorPatternPropertiesAdditionalProperties(value: unknown): value is types.ApplicatorPatternPropertiesAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorDependentSchemas(value: unknown): value is types.ApplicatorDependentSchemas {
    if (!(isRecordApplicatorDependentSchemas(value))) {
        return false;
    }
    return true;
}
function isRecordApplicatorDependentSchemas(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isApplicatorDependentSchemasAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isApplicatorDependentSchemasAdditionalProperties(value: unknown): value is types.ApplicatorDependentSchemasAdditionalProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorPropertyNames(value: unknown): value is types.ApplicatorPropertyNames {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorIf(value: unknown): value is types.ApplicatorIf {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorThen(value: unknown): value is types.ApplicatorThen {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorElse(value: unknown): value is types.ApplicatorElse {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAllOf(value: unknown): value is types.ApplicatorAllOf {
    if (!isApplicatorSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorAnyOf(value: unknown): value is types.ApplicatorAnyOf {
    if (!isApplicatorSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorOneOf(value: unknown): value is types.ApplicatorOneOf {
    if (!isApplicatorSchemaArray(value)) {
        return false;
    }
    return true;
}
export function isApplicatorNot(value: unknown): value is types.ApplicatorNot {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isUnevaluated(value: unknown): value is types.Unevaluated {
    if (!(isInterfaceUnevaluated(value) || isBooleanUnevaluated(value))) {
        return false;
    }
    return true;
}
function isInterfaceUnevaluated(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "unevaluatedItems":
                if (!isUnevaluatedUnevaluatedItems(propertyValue)) {
                    return false;
                }
                break;
            case "unevaluatedProperties":
                if (!isUnevaluatedUnevaluatedProperties(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanUnevaluated(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isUnevaluatedUnevaluatedItems(value: unknown): value is types.UnevaluatedUnevaluatedItems {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isUnevaluatedUnevaluatedProperties(value: unknown): value is types.UnevaluatedUnevaluatedProperties {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
export function isValidation(value: unknown): value is types.Validation {
    if (!(isInterfaceValidation(value) || isBooleanValidation(value))) {
        return false;
    }
    return true;
}
function isInterfaceValidation(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "type":
                if (!isValidationType(propertyValue)) {
                    return false;
                }
                break;
            case "const":
                if (!isValidationConst(propertyValue)) {
                    return false;
                }
                break;
            case "enum":
                if (!isValidationEnum(propertyValue)) {
                    return false;
                }
                break;
            case "multipleOf":
                if (!isValidationMultipleOf(propertyValue)) {
                    return false;
                }
                break;
            case "maximum":
                if (!isValidationMaximum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMaximum":
                if (!isValidationExclusiveMaximum(propertyValue)) {
                    return false;
                }
                break;
            case "minimum":
                if (!isValidationMinimum(propertyValue)) {
                    return false;
                }
                break;
            case "exclusiveMinimum":
                if (!isValidationExclusiveMinimum(propertyValue)) {
                    return false;
                }
                break;
            case "maxLength":
                if (!isValidationMaxLength(propertyValue)) {
                    return false;
                }
                break;
            case "minLength":
                if (!isValidationMinLength(propertyValue)) {
                    return false;
                }
                break;
            case "pattern":
                if (!isValidationPattern(propertyValue)) {
                    return false;
                }
                break;
            case "maxItems":
                if (!isValidationMaxItems(propertyValue)) {
                    return false;
                }
                break;
            case "minItems":
                if (!isValidationMinItems(propertyValue)) {
                    return false;
                }
                break;
            case "uniqueItems":
                if (!isValidationUniqueItems(propertyValue)) {
                    return false;
                }
                break;
            case "maxContains":
                if (!isValidationMaxContains(propertyValue)) {
                    return false;
                }
                break;
            case "minContains":
                if (!isValidationMinContains(propertyValue)) {
                    return false;
                }
                break;
            case "maxProperties":
                if (!isValidationMaxProperties(propertyValue)) {
                    return false;
                }
                break;
            case "minProperties":
                if (!isValidationMinProperties(propertyValue)) {
                    return false;
                }
                break;
            case "required":
                if (!isValidationRequired(propertyValue)) {
                    return false;
                }
                break;
            case "dependentRequired":
                if (!isValidationDependentRequired(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanValidation(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isValidationNonNegativeInteger(value: unknown): value is types.ValidationNonNegativeInteger {
    if (!(isNumberValidationNonNegativeInteger(value))) {
        return false;
    }
    return true;
}
function isNumberValidationNonNegativeInteger(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value % 1 !== 0) {
        return false;
    }
    if (value < 0) {
        return false;
    }
    return true;
}
export function isValidationNonNegativeIntegerDefault0(value: unknown): value is types.ValidationNonNegativeIntegerDefault0 {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationSimpleTypes(value: unknown): value is types.ValidationSimpleTypes {
    return true;
}
export function isValidationStringArray(value: unknown): value is types.ValidationStringArray {
    if (!(isArrayValidationStringArray(value))) {
        return false;
    }
    return true;
}
function isArrayValidationStringArray(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    const elementValueSeen = new Set<types.ValidationStringArrayItems>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isValidationStringArrayItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationStringArrayItems(value: unknown): value is types.ValidationStringArrayItems {
    if (!(isStringValidationStringArrayItems(value))) {
        return false;
    }
    return true;
}
function isStringValidationStringArrayItems(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isValidationType(value: unknown): value is types.ValidationType {
    if (!(isAnyOfValidationType(value))) {
        return false;
    }
    return true;
}
function isAnyOfValidationType(value: unknown): value is unknown {
    if (isValidationType0(value)) {
        return true;
    }
    if (isValidationType1(value)) {
        return true;
    }
    return false;
}
export function isValidationType0(value: unknown): value is types.ValidationType0 {
    if (!isValidationSimpleTypes(value)) {
        return false;
    }
    return true;
}
export function isValidationType1(value: unknown): value is types.ValidationType1 {
    if (!(isArrayValidationType1(value))) {
        return false;
    }
    return true;
}
function isArrayValidationType1(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    if (value.length < 1) {
        return false;
    }
    const elementValueSeen = new Set<types.ValidationType1Items>();
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (elementValueSeen.has(elementValue)) {
            return false;
        }
        elementValueSeen.add(elementValue);
        if (!isValidationType1Items(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationType1Items(value: unknown): value is types.ValidationType1Items {
    if (!isValidationSimpleTypes(value)) {
        return false;
    }
    return true;
}
export function isValidationConst(value: unknown): value is types.ValidationConst {
    if (!(isAnyValidationConst(value))) {
        return false;
    }
    return true;
}
function isAnyValidationConst(value: unknown): value is unknown {
    return true;
}
export function isValidationEnum(value: unknown): value is types.ValidationEnum {
    if (!(isArrayValidationEnum(value))) {
        return false;
    }
    return true;
}
function isArrayValidationEnum(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isValidationEnumItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationEnumItems(value: unknown): value is types.ValidationEnumItems {
    if (!(isAnyValidationEnumItems(value))) {
        return false;
    }
    return true;
}
function isAnyValidationEnumItems(value: unknown): value is unknown {
    return true;
}
export function isValidationMultipleOf(value: unknown): value is types.ValidationMultipleOf {
    if (!(isNumberValidationMultipleOf(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMultipleOf(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    if (value <= 0) {
        return false;
    }
    return true;
}
export function isValidationMaximum(value: unknown): value is types.ValidationMaximum {
    if (!(isNumberValidationMaximum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMaximum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationExclusiveMaximum(value: unknown): value is types.ValidationExclusiveMaximum {
    if (!(isNumberValidationExclusiveMaximum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationExclusiveMaximum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationMinimum(value: unknown): value is types.ValidationMinimum {
    if (!(isNumberValidationMinimum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationMinimum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationExclusiveMinimum(value: unknown): value is types.ValidationExclusiveMinimum {
    if (!(isNumberValidationExclusiveMinimum(value))) {
        return false;
    }
    return true;
}
function isNumberValidationExclusiveMinimum(value: unknown): value is unknown {
    if (typeof value !== "number" || isNaN(value)) {
        return false;
    }
    return true;
}
export function isValidationMaxLength(value: unknown): value is types.ValidationMaxLength {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinLength(value: unknown): value is types.ValidationMinLength {
    if (!isValidationNonNegativeIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationPattern(value: unknown): value is types.ValidationPattern {
    if (!(isStringValidationPattern(value))) {
        return false;
    }
    return true;
}
function isStringValidationPattern(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isValidationMaxItems(value: unknown): value is types.ValidationMaxItems {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinItems(value: unknown): value is types.ValidationMinItems {
    if (!isValidationNonNegativeIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationUniqueItems(value: unknown): value is types.ValidationUniqueItems {
    if (!(isBooleanValidationUniqueItems(value))) {
        return false;
    }
    return true;
}
function isBooleanValidationUniqueItems(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isValidationMaxContains(value: unknown): value is types.ValidationMaxContains {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinContains(value: unknown): value is types.ValidationMinContains {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMaxProperties(value: unknown): value is types.ValidationMaxProperties {
    if (!isValidationNonNegativeInteger(value)) {
        return false;
    }
    return true;
}
export function isValidationMinProperties(value: unknown): value is types.ValidationMinProperties {
    if (!isValidationNonNegativeIntegerDefault0(value)) {
        return false;
    }
    return true;
}
export function isValidationRequired(value: unknown): value is types.ValidationRequired {
    if (!isValidationStringArray(value)) {
        return false;
    }
    return true;
}
export function isValidationDependentRequired(value: unknown): value is types.ValidationDependentRequired {
    if (!(isRecordValidationDependentRequired(value))) {
        return false;
    }
    return true;
}
function isRecordValidationDependentRequired(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        if (!isValidationDependentRequiredAdditionalProperties(propertyValue)) {
            return false;
        }
    }
    return true;
}
export function isValidationDependentRequiredAdditionalProperties(value: unknown): value is types.ValidationDependentRequiredAdditionalProperties {
    if (!isValidationStringArray(value)) {
        return false;
    }
    return true;
}
export function isMetaData(value: unknown): value is types.MetaData {
    if (!(isInterfaceMetaData(value) || isBooleanMetaData(value))) {
        return false;
    }
    return true;
}
function isInterfaceMetaData(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "title":
                if (!isMetaDataTitle(propertyValue)) {
                    return false;
                }
                break;
            case "description":
                if (!isMetaDataDescription(propertyValue)) {
                    return false;
                }
                break;
            case "default":
                if (!isMetaDataDefault(propertyValue)) {
                    return false;
                }
                break;
            case "deprecated":
                if (!isMetaDataDeprecated(propertyValue)) {
                    return false;
                }
                break;
            case "readOnly":
                if (!isMetaDataReadOnly(propertyValue)) {
                    return false;
                }
                break;
            case "writeOnly":
                if (!isMetaDataWriteOnly(propertyValue)) {
                    return false;
                }
                break;
            case "examples":
                if (!isMetaDataExamples(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanMetaData(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataTitle(value: unknown): value is types.MetaDataTitle {
    if (!(isStringMetaDataTitle(value))) {
        return false;
    }
    return true;
}
function isStringMetaDataTitle(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isMetaDataDescription(value: unknown): value is types.MetaDataDescription {
    if (!(isStringMetaDataDescription(value))) {
        return false;
    }
    return true;
}
function isStringMetaDataDescription(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isMetaDataDefault(value: unknown): value is types.MetaDataDefault {
    if (!(isAnyMetaDataDefault(value))) {
        return false;
    }
    return true;
}
function isAnyMetaDataDefault(value: unknown): value is unknown {
    return true;
}
export function isMetaDataDeprecated(value: unknown): value is types.MetaDataDeprecated {
    if (!(isBooleanMetaDataDeprecated(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataDeprecated(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataReadOnly(value: unknown): value is types.MetaDataReadOnly {
    if (!(isBooleanMetaDataReadOnly(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataReadOnly(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataWriteOnly(value: unknown): value is types.MetaDataWriteOnly {
    if (!(isBooleanMetaDataWriteOnly(value))) {
        return false;
    }
    return true;
}
function isBooleanMetaDataWriteOnly(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isMetaDataExamples(value: unknown): value is types.MetaDataExamples {
    if (!(isArrayMetaDataExamples(value))) {
        return false;
    }
    return true;
}
function isArrayMetaDataExamples(value: unknown): value is unknown {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const elementIndex in value) {
        const elementValue = value[elementIndex];
        if (!isMetaDataExamplesItems(elementValue)) {
            return false;
        }
    }
    return true;
}
export function isMetaDataExamplesItems(value: unknown): value is types.MetaDataExamplesItems {
    if (!(isAnyMetaDataExamplesItems(value))) {
        return false;
    }
    return true;
}
function isAnyMetaDataExamplesItems(value: unknown): value is unknown {
    return true;
}
export function isFormatAnnotation(value: unknown): value is types.FormatAnnotation {
    if (!(isInterfaceFormatAnnotation(value) || isBooleanFormatAnnotation(value))) {
        return false;
    }
    return true;
}
function isInterfaceFormatAnnotation(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "format":
                if (!isFormatAnnotationFormat(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanFormatAnnotation(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isFormatAnnotationFormat(value: unknown): value is types.FormatAnnotationFormat {
    if (!(isStringFormatAnnotationFormat(value))) {
        return false;
    }
    return true;
}
function isStringFormatAnnotationFormat(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContent(value: unknown): value is types.Content {
    if (!(isInterfaceContent(value) || isBooleanContent(value))) {
        return false;
    }
    return true;
}
function isInterfaceContent(value: unknown): value is unknown {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return false;
    }
    for (const propertyName in value) {
        const propertyValue = value[propertyName as keyof typeof value];
        switch (propertyName) {
            case "contentEncoding":
                if (!isContentContentEncoding(propertyValue)) {
                    return false;
                }
                break;
            case "contentMediaType":
                if (!isContentContentMediaType(propertyValue)) {
                    return false;
                }
                break;
            case "contentSchema":
                if (!isContentContentSchema(propertyValue)) {
                    return false;
                }
                break;
        }
    }
    return true;
}
function isBooleanContent(value: unknown): value is unknown {
    if (typeof value !== "boolean") {
        return false;
    }
    return true;
}
export function isContentContentEncoding(value: unknown): value is types.ContentContentEncoding {
    if (!(isStringContentContentEncoding(value))) {
        return false;
    }
    return true;
}
function isStringContentContentEncoding(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContentContentMediaType(value: unknown): value is types.ContentContentMediaType {
    if (!(isStringContentContentMediaType(value))) {
        return false;
    }
    return true;
}
function isStringContentContentMediaType(value: unknown): value is unknown {
    if (typeof value !== "string") {
        return false;
    }
    return true;
}
export function isContentContentSchema(value: unknown): value is types.ContentContentSchema {
    if (!isSchema(value)) {
        return false;
    }
    return true;
}
